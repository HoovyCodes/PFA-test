@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 sLvl50_Mons1,object
sLvl50_Mons1:
	.short	0x150
	.byte	0x4
	.space	1
	.short	0x5c
	.short	0x89
	.short	0x22
	.short	0xbc
	.short	0x15e
	.byte	0x4
	.space	1
	.short	0x5c
	.short	0x5f
	.short	0x22
	.short	0x39
	.short	0x164
	.byte	0x5
	.space	1
	.short	0x105
	.short	0xd4
	.short	0x5c
	.short	0x145
	.size	 sLvl50_Mons1,36
	.align	2, 0
	.type	 sLvl50_Mons2,object
sLvl50_Mons2:
	.short	0x150
	.byte	0x4
	.space	1
	.short	0x5c
	.short	0x89
	.short	0x22
	.short	0xbc
	.short	0x15e
	.byte	0x4
	.space	1
	.short	0x5c
	.short	0x5f
	.short	0x22
	.short	0x39
	.short	0x65
	.byte	0x5
	.space	1
	.short	0x99
	.short	0x78
	.short	0x57
	.short	0x5c
	.size	 sLvl50_Mons2,36
	.align	2, 0
	.type	 sLvl50_Mons3,object
sLvl50_Mons3:
	.short	0x150
	.byte	0x4
	.space	1
	.short	0x5c
	.short	0x89
	.short	0x22
	.short	0xbc
	.short	0x15e
	.byte	0x4
	.space	1
	.short	0x5c
	.short	0x5f
	.short	0x22
	.short	0x39
	.short	0x11e
	.byte	0x5
	.space	1
	.short	0x93
	.short	0x4e
	.short	0x4d
	.short	0xed
	.size	 sLvl50_Mons3,36
	.align	2, 0
	.type	 sLvl50_Mons4,object
sLvl50_Mons4:
	.short	0x150
	.byte	0x4
	.space	1
	.short	0x5c
	.short	0x89
	.short	0x22
	.short	0xbc
	.short	0x15e
	.byte	0x4
	.space	1
	.short	0x5c
	.short	0x5f
	.short	0x22
	.short	0x39
	.short	0xca
	.byte	0x5
	.space	1
	.short	0x44
	.short	0xf3
	.short	0xdb
	.short	0xc2
	.size	 sLvl50_Mons4,36
	.align	2, 0
	.type	 sLvl50Mons,object
sLvl50Mons:
	.word	sLvl50_Mons1
	.word	sLvl50_Mons2
	.word	sLvl50_Mons3
	.word	sLvl50_Mons4
	.size	 sLvl50Mons,16
	.align	2, 0
	.type	 sLvlOpen_Mons1,object
sLvlOpen_Mons1:
	.short	0x150
	.byte	0x4
	.space	1
	.short	0x5c
	.short	0x89
	.short	0x131
	.short	0xbc
	.short	0x15e
	.byte	0x4
	.space	1
	.short	0x5c
	.short	0x5f
	.short	0x22
	.short	0x3a
	.short	0x1dd
	.byte	0x5
	.space	1
	.short	0x105
	.short	0xd4
	.short	0x5c
	.short	0x3a
	.size	 sLvlOpen_Mons1,36
	.align	2, 0
	.type	 sLvlOpen_Mons2,object
sLvlOpen_Mons2:
	.short	0x150
	.byte	0x4
	.space	1
	.short	0x5c
	.short	0x89
	.short	0x131
	.short	0xbc
	.short	0x15e
	.byte	0x4
	.space	1
	.short	0x5c
	.short	0x5f
	.short	0x22
	.short	0x3a
	.short	0x309
	.byte	0x5
	.space	1
	.short	0x261
	.short	0x254
	.short	0x57
	.short	0x5c
	.size	 sLvlOpen_Mons2,36
	.align	2, 0
	.type	 sLvlOpen_Mons3,object
sLvlOpen_Mons3:
	.short	0x150
	.byte	0x4
	.space	1
	.short	0x5c
	.short	0x89
	.short	0x131
	.short	0xbc
	.short	0x15e
	.byte	0x4
	.space	1
	.short	0x5c
	.short	0x5f
	.short	0x22
	.short	0x3a
	.short	0x2f4
	.byte	0x5
	.space	1
	.short	0x93
	.short	0x4e
	.short	0x4d
	.short	0xed
	.size	 sLvlOpen_Mons3,36
	.align	2, 0
	.type	 sLvlOpen_Mons4,object
sLvlOpen_Mons4:
	.short	0x150
	.byte	0x4
	.space	1
	.short	0x5c
	.short	0x89
	.short	0x131
	.short	0xbc
	.short	0x15e
	.byte	0x4
	.space	1
	.short	0x5c
	.short	0x5f
	.short	0x22
	.short	0x3a
	.short	0xca
	.byte	0x5
	.space	1
	.short	0x44
	.short	0xf3
	.short	0xdb
	.short	0xe3
	.size	 sLvlOpen_Mons4,36
	.align	2, 0
	.type	 sLvlOpenMons,object
sLvlOpenMons:
	.word	sLvlOpen_Mons1
	.word	sLvlOpen_Mons2
	.word	sLvlOpen_Mons3
	.word	sLvlOpen_Mons4
	.size	 sLvlOpenMons,16
	.align	2, 0
	.type	 sWildMons,object
	.size	 sWildMons,8
sWildMons:
	.word	sLvl50Mons
	.word	sLvlOpenMons
	.align	2, 0
	.type	 sNPCTable,object
sNPCTable:
	.short	0x12
	.byte	0x3
	.byte	0x5
	.byte	0x6
	.space	3
	.short	0x5
	.byte	0xd
	.byte	0x20
	.byte	0x25
	.space	3
	.short	0x11
	.byte	0x8
	.byte	0xb
	.byte	0xc
	.space	3
	.short	0x24
	.byte	0x22
	.byte	0x1e
	.byte	0x21
	.space	3
	.short	0x15
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	3
	.short	0x1e
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.space	3
	.short	0x2c
	.byte	0x16
	.byte	0x17
	.byte	0x1b
	.space	3
	.short	0x37
	.byte	0x8
	.byte	0x16
	.byte	0x1f
	.space	3
	.short	0xe
	.byte	0xd
	.byte	0x27
	.byte	0x15
	.space	3
	.short	0x14
	.byte	0x2
	.byte	0x4
	.byte	0x11
	.space	3
	.short	0x38
	.byte	0x1e
	.byte	0x14
	.byte	0x24
	.space	3
	.short	0x42
	.byte	0x1c
	.byte	0x22
	.byte	0x19
	.space	3
	.short	0x26
	.byte	0x17
	.byte	0x26
	.byte	0x1a
	.space	3
	.short	0x32
	.byte	0x17
	.byte	0x1e
	.byte	0xb
	.space	3
	.short	0x2f
	.byte	0xf
	.byte	0x13
	.byte	0xe
	.space	3
	.short	0x27
	.byte	0x2
	.byte	0x1d
	.byte	0x1a
	.space	3
	.short	0x33
	.byte	0x25
	.byte	0xc
	.byte	0x20
	.space	3
	.short	0x21
	.byte	0x18
	.byte	0x17
	.byte	0x26
	.space	3
	.short	0x18
	.byte	0x5
	.byte	0x16
	.byte	0x4
	.space	3
	.short	0xb
	.byte	0x29
	.byte	0x25
	.byte	0x23
	.space	3
	.short	0x35
	.byte	0x27
	.byte	0xe
	.byte	0xd
	.space	3
	.short	0x30
	.byte	0xa
	.byte	0x7
	.byte	0x9
	.space	3
	.short	0xc
	.byte	0x28
	.byte	0x14
	.byte	0x10
	.space	3
	.short	0x34
	.byte	0x12
	.byte	0xd
	.byte	0x15
	.space	3
	.short	0x13
	.byte	0x16
	.byte	0x1f
	.byte	0x1b
	.space	3
	.size	 sNPCTable,200
	.align	1, 0
	.type	 sNPCSpeeches,object
sNPCSpeeches:
	.short	0xa29
	.short	0x630
	.short	0xa01
	.short	0x140f
	.short	0x1020
	.short	0x270e
	.short	0xa2a
	.short	0x81d
	.short	0x61b
	.short	0x1034
	.short	0x1e20
	.short	0xa29
	.short	0x1e22
	.short	0x1231
	.short	0xa01
	.short	0x1018
	.short	0x1c1a
	.short	0xc03
	.short	0x1e0f
	.short	0x100b
	.short	0x1039
	.short	0x200f
	.short	0x102b
	.short	0xa14
	.short	0x103b
	.short	0xa02
	.short	0x161e
	.short	0x1020
	.short	0x143e
	.short	0xc03
	.short	0xa31
	.short	0xe02
	.short	0xe15
	.short	0x1436
	.short	0x1037
	.short	0x1e0a
	.short	0xa29
	.short	0x1025
	.short	0x142a
	.short	0x1034
	.short	0x1e0f
	.short	0xa1b
	.short	0xa01
	.short	0xe07
	.short	0x122a
	.short	0x1e0f
	.short	0x61f
	.short	0xffff
	.short	0x1a35
	.short	0x1036
	.short	0xe0f
	.short	0xa01
	.short	0x2621
	.short	0x1e0f
	.short	0xe25
	.short	0x102f
	.short	0x62d
	.short	0x201e
	.short	0xc03
	.short	0xffff
	.short	0xc1d
	.short	0x81d
	.short	0xa2b
	.short	0x100f
	.short	0xa02
	.short	0xc03
	.short	0xa2a
	.short	0xa3e
	.short	0x2000
	.short	0x1027
	.short	0x1c08
	.short	0xc04
	.short	0xa01
	.short	0x1212
	.short	0xa01
	.short	0x1000
	.short	0x62d
	.short	0xffff
	.short	0x1e22
	.short	0x1231
	.short	0xa01
	.short	0x1018
	.short	0x1c1c
	.short	0xc03
	.short	0xa01
	.short	0x60b
	.short	0x1030
	.short	0xa28
	.short	0x2549
	.short	0x624
	.short	0x1014
	.short	0xa2c
	.short	0x415
	.short	0x1642
	.short	0x1e1b
	.short	0xc03
	.short	0x628
	.short	0x1a0f
	.short	0x100b
	.short	0x2017
	.short	0xc00
	.short	0xffff
	.short	0xa01
	.short	0x1015
	.short	0x1647
	.short	0x1e0f
	.short	0xe39
	.short	0xe36
	.short	0xa01
	.short	0x1017
	.short	0x1620
	.short	0xe19
	.short	0xa31
	.short	0xc38
	.short	0xc1d
	.short	0x81d
	.short	0xc00
	.short	0x1022
	.short	0x1c12
	.short	0x20b
	.short	0x1029
	.short	0x1404
	.short	0x102f
	.short	0x1006
	.short	0x1e28
	.short	0x1c1c
	.short	0x1029
	.short	0xe20
	.short	0x1028
	.short	0x1c16
	.short	0x1e29
	.short	0xc03
	.short	0x1e0f
	.short	0x100b
	.short	0xe2f
	.short	0x638
	.short	0x100c
	.short	0xffff
	.short	0xa29
	.short	0x1408
	.short	0x102f
	.short	0x61e
	.short	0x102c
	.short	0xffff
	.short	0x1023
	.short	0x100b
	.short	0x81d
	.short	0x62d
	.short	0x1037
	.short	0xa14
	.short	0xa29
	.short	0x1022
	.short	0x1408
	.short	0x102f
	.short	0x161e
	.short	0x1029
	.short	0x601
	.short	0x102c
	.short	0xa01
	.short	0x1015
	.short	0xe39
	.short	0xe36
	.short	0x1020
	.short	0x20b
	.short	0x103f
	.short	0x1c12
	.short	0xc04
	.short	0xffff
	.short	0x1018
	.short	0xa02
	.short	0x103a
	.short	0x446
	.short	0x20e
	.short	0xc03
	.short	0x1e10
	.short	0x20b
	.short	0x1e0a
	.short	0x100b
	.short	0x63a
	.short	0xffff
	.short	0xa02
	.short	0x1212
	.short	0x1e0f
	.short	0x100b
	.short	0x638
	.short	0xc03
	.short	0x1e22
	.short	0x1000
	.short	0x161b
	.short	0x103f
	.short	0x1e0f
	.short	0xc03
	.short	0xa29
	.short	0xe1e
	.short	0x1025
	.short	0x1e26
	.short	0xc00
	.short	0xffff
	.short	0xa01
	.short	0xe1e
	.short	0x1236
	.short	0x102f
	.short	0x120b
	.short	0xc04
	.short	0x2805
	.short	0x1e0f
	.short	0xa1b
	.short	0x100b
	.short	0x1020
	.short	0x63b
	.short	0xa01
	.short	0x101f
	.short	0xa3e
	.short	0x1037
	.short	0x1020
	.short	0x628
	.short	0x1026
	.short	0xa31
	.short	0x1e29
	.short	0x1c1c
	.short	0xa01
	.short	0x1212
	.short	0xc0a
	.short	0xc00
	.short	0x1029
	.short	0x101c
	.short	0x1e0f
	.short	0xc23
	.short	0xa28
	.short	0x20e
	.short	0x100f
	.short	0x1039
	.short	0x142a
	.short	0xc04
	.short	0xa28
	.short	0x20e
	.short	0x100f
	.short	0x620
	.short	0x102f
	.short	0x43c
	.short	0xc39
	.short	0xc39
	.short	0xc00
	.short	0xa29
	.short	0x2017
	.short	0xc39
	.short	0x265c
	.short	0x100b
	.short	0x1020
	.short	0x1230
	.short	0x1e05
	.short	0x100c
	.size	 sNPCSpeeches,504
	.type	 sFrontierBrainStreakAppearances,object
	.size	 sFrontierBrainStreakAppearances,28
sFrontierBrainStreakAppearances:
	.byte	0x23
	.byte	0x46
	.byte	0x23
	.byte	0x1
	.byte	0x4
	.byte	0x9
	.byte	0x5
	.byte	0x0
	.byte	0x15
	.byte	0x2a
	.byte	0x15
	.byte	0x1
	.byte	0x1c
	.byte	0x38
	.byte	0x1c
	.byte	0x1
	.byte	0x15
	.byte	0x2a
	.byte	0x15
	.byte	0x1
	.byte	0x1c
	.byte	0x8c
	.byte	0x38
	.byte	0x1
	.byte	0x15
	.byte	0x46
	.byte	0x23
	.byte	0x0
	.align	2, 0
	.type	 sBattlePikeFunctions,object
sBattlePikeFunctions:
	.word	SetRoomType
	.word	GetBattlePikeData
	.word	SetBattlePikeData
	.word	IsNextRoomFinal
	.word	SetupRoomObjectEvents
	.word	GetRoomType
	.word	SetInWildMonRoom
	.word	ClearInWildMonRoom
	.word	SavePikeChallenge
	.word	nullsub_76
	.word	nullsub_124
	.word	GetRoomInflictedStatus
	.word	GetRoomInflictedStatusMon
	.word	HealOneOrTwoMons
	.word	BufferNPCMessage
	.word	StatusInflictionScreenFlash
	.word	GetInBattlePike
	.word	SetHintedRoom
	.word	GetHintedRoomIndex
	.word	GetRoomTypeHint
	.word	ClearPikeTrainerIds
	.word	BufferTrainerIntro
	.word	GetCurrentRoomPikeQueenFightType
	.word	HealSomeMonsBeforePikeQueen
	.word	SetHealingroomTypesDisabled
	.word	IsPartyFullHealed
	.word	SaveMonHeldItems
	.word	RestoreMonHeldItems
	.word	InitPikeChallenge
	.size	 sBattlePikeFunctions,116
	.type	 sRoomTypeHints,object
sRoomTypeHints:
	.byte	0x3
	.byte	0x3
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x2
	.byte	0x2
	.byte	0x1
	.byte	0x4
	.size	 sRoomTypeHints,9
	.type	 sNumMonsToHealBeforePikeQueen,object
sNumMonsToHealBeforePikeQueen:
	.byte	0x2
	.byte	0x1
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x2
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0x2
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.size	 sNumMonsToHealBeforePikeQueen,18
	.align	2, 0
	.type	 sStatusInflictionScreenFlashFuncs,object
sStatusInflictionScreenFlashFuncs:
	.word	StatusInflictionFadeOut
	.word	StatusInflictionFadeIn
	.size	 sStatusInflictionScreenFlashFuncs,8
	.align	2, 0
	.type	 sWinStreakFlags,object
sWinStreakFlags:
	.word	0x400
	.word	0x800
	.size	 sWinStreakFlags,8
.text
	.align	2, 0
	.globl	CallBattlePikeFunction
	.type	 CallBattlePikeFunction,function
	.thumb_func
CallBattlePikeFunction:
	push	{lr}
	ldr	r1, .L3
	ldr	r0, .L3+0x4
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	_call_via_r0
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	sBattlePikeFunctions
	.word	gSpecialVar_0x8004
.Lfe1:
	.size	 CallBattlePikeFunction,.Lfe1-CallBattlePikeFunction
	.align	2, 0
	.type	 SetRoomType,function
	.thumb_func
SetRoomType:
	push	{lr}
	bl	GetNextRoomType
	ldr	r1, .L6
	strb	r0, [r1]
	pop	{r0}
	bx	r0
.L7:
	.align	2, 0
.L6:
	.word	sRoomType
.Lfe2:
	.size	 SetRoomType,.Lfe2-SetRoomType
	.align	2, 0
	.type	 SetupRoomObjectEvents,function
	.thumb_func
SetupRoomObjectEvents:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L29
	mov	r1, #0x1c
	bl	VarSet
	ldr	r0, .L29+0x4
	mov	r1, #0xe2
	bl	VarSet
	mov	r4, #0x1
	mov	r6, #0x0
	mov	r5, #0x0
	mov	r7, #0x0
	ldr	r0, .L29+0x8
	ldrb	r0, [r0]
	cmp	r0, #0x8
	bhi	.L8	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L29+0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L30:
	.align	2, 0
.L29:
	.word	0x4010
	.word	0x4011
	.word	sRoomType
	.word	.L22
	.align	2, 0
	.align	2, 0
.L22:
	.word	.L10
	.word	.L11
	.word	.L12
	.word	.L13
	.word	.L16
	.word	.L28
	.word	.L18
	.word	.L19
	.word	.L20
.L10:
	mov	r0, #0x0
	bl	PrepareOneTrainer
.L28:
	mov	r4, #0x0
	b	.L9
.L11:
	mov	r5, #0x1c
	b	.L9
.L12:
	bl	GetNPCRoomGraphicsId
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	b	.L9
.L13:
	mov	r5, #0x30
	ldr	r0, .L31
	ldrb	r0, [r0]
	mov	r7, #0xe1
	cmp	r0, #0x1
	bne	.L25	@cond_branch
	mov	r7, #0xe2
	b	.L25
.L32:
	.align	2, 0
.L31:
	.word	sStatusMon
.L16:
	mov	r5, #0x30
	b	.L9
.L18:
	mov	r0, #0x1
	bl	PrepareOneTrainer
	b	.L27
.L19:
	bl	PrepareTwoTrainers
	b	.L28
.L20:
	mov	r0, #0x5
	bl	SetFrontierBrainObjEventGfx
.L27:
	mov	r7, #0x1c
	mov	r4, #0x0
.L25:
	mov	r6, #0x1
.L9:
	cmp	r4, #0x1
	bne	.L23	@cond_branch
	ldr	r0, .L33
	add	r1, r5, #0
	bl	VarSet
.L23:
	cmp	r6, #0x1
	bne	.L8	@cond_branch
	ldr	r0, .L33+0x4
	add	r1, r7, #0
	bl	VarSet
.L8:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L34:
	.align	2, 0
.L33:
	.word	0x4010
	.word	0x4011
.Lfe3:
	.size	 SetupRoomObjectEvents,.Lfe3-SetupRoomObjectEvents
	.align	2, 0
	.type	 GetBattlePikeData,function
	.thumb_func
GetBattlePikeData:
	push	{lr}
	ldr	r1, .L48
	ldr	r0, [r1]
	ldr	r2, .L48+0x4
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	lsr	r2, r0, #0x1e
	ldr	r0, .L48+0x8
	ldrh	r0, [r0]
	add	r3, r1, #0
	cmp	r0, #0x4
	bhi	.L36	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L48+0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L49:
	.align	2, 0
.L48:
	.word	gSaveBlock2Ptr
	.word	0xca9
	.word	gSpecialVar_0x8005
	.word	.L44
	.align	2, 0
	.align	2, 0
.L44:
	.word	.L37
	.word	.L38
	.word	.L39
	.word	.L40
	.word	.L41
.L37:
	ldr	r0, .L50
	ldr	r1, [r3]
	ldr	r3, .L50+0x4
	add	r1, r1, r3
	ldrh	r1, [r1]
	strh	r1, [r0]
	b	.L36
.L51:
	.align	2, 0
.L50:
	.word	gSpecialVar_Result
	.word	0xe02
.L38:
	ldr	r2, .L52
	ldr	r1, [r3]
	ldr	r3, .L52+0x4
	add	r0, r1, r3
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1d
	ldr	r3, .L52+0x8
	add	r1, r1, r3
	add	r1, r1, r0
	ldrh	r0, [r1]
	b	.L46
.L53:
	.align	2, 0
.L52:
	.word	gSpecialVar_Result
	.word	0xca9
	.word	0xe04
.L39:
	ldr	r2, .L54
	ldr	r1, [r3]
	ldr	r3, .L54+0x4
	add	r0, r1, r3
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1d
	ldr	r3, .L54+0x8
	add	r1, r1, r3
	add	r1, r1, r0
	ldrh	r0, [r1]
	b	.L46
.L55:
	.align	2, 0
.L54:
	.word	gSpecialVar_Result
	.word	0xca9
	.word	0xe08
.L40:
	ldr	r2, .L56
	ldr	r1, [r3]
	ldr	r3, .L56+0x4
	add	r0, r1, r3
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1d
	ldr	r3, .L56+0x8
	add	r1, r1, r3
	add	r1, r1, r0
	ldrh	r0, [r1]
	b	.L46
.L57:
	.align	2, 0
.L56:
	.word	gSpecialVar_Result
	.word	0xca9
	.word	0xe0c
.L41:
	cmp	r2, #0
	beq	.L42	@cond_branch
	ldr	r2, .L58
	ldr	r0, [r3]
	ldr	r1, .L58+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x4
	b	.L47
.L59:
	.align	2, 0
.L58:
	.word	gSpecialVar_Result
	.word	0xcdc
.L42:
	ldr	r2, .L60
	ldr	r0, [r3]
	ldr	r3, .L60+0x4
	add	r0, r0, r3
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x3
.L47:
	and	r0, r0, r1
.L46:
	strh	r0, [r2]
.L36:
	pop	{r0}
	bx	r0
.L61:
	.align	2, 0
.L60:
	.word	gSpecialVar_Result
	.word	0xcdc
.Lfe4:
	.size	 GetBattlePikeData,.Lfe4-GetBattlePikeData
	.align	2, 0
	.type	 SetBattlePikeData,function
	.thumb_func
SetBattlePikeData:
	push	{r4, r5, lr}
	ldr	r1, .L83
	ldr	r0, [r1]
	ldr	r2, .L83+0x4
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	lsr	r3, r0, #0x1e
	ldr	r0, .L83+0x8
	ldrh	r0, [r0]
	add	r2, r1, #0
	cmp	r0, #0x4
	bls	.LCB390
	b	.L63	@long jump
.LCB390:
	lsl	r0, r0, #0x2
	ldr	r1, .L83+0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L84:
	.align	2, 0
.L83:
	.word	gSaveBlock2Ptr
	.word	0xca9
	.word	gSpecialVar_0x8005
	.word	.L78
	.align	2, 0
	.align	2, 0
.L78:
	.word	.L64
	.word	.L65
	.word	.L67
	.word	.L69
	.word	.L71
.L64:
	ldr	r0, [r2]
	ldr	r1, .L85
	ldrh	r1, [r1]
	ldr	r5, .L85+0x4
	add	r0, r0, r5
	strh	r1, [r0]
	b	.L63
.L86:
	.align	2, 0
.L85:
	.word	gSpecialVar_0x8006
	.word	0xe02
.L65:
	ldr	r0, .L87
	ldrh	r3, [r0]
	ldr	r0, .L87+0x4
	cmp	r3, r0
	bls	.LCB438
	b	.L63	@long jump
.LCB438:
	ldr	r0, [r2]
	ldr	r2, .L87+0x8
	add	r1, r0, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x1e
	lsr	r1, r1, #0x1d
	ldr	r5, .L87+0xc
	b	.L80
.L88:
	.align	2, 0
.L87:
	.word	gSpecialVar_0x8006
	.word	0x270f
	.word	0xca9
	.word	0xe04
.L67:
	ldr	r0, .L89
	ldrh	r4, [r0]
	add	r3, r4, #0
	ldr	r0, .L89+0x4
	cmp	r3, r0
	bhi	.L63	@cond_branch
	ldr	r1, [r2]
	ldr	r2, .L89+0x8
	add	r0, r1, r2
	ldrb	r0, [r0]
	lsl	r2, r0, #0x1e
	lsr	r0, r2, #0x1d
	ldr	r5, .L89+0xc
	add	r1, r1, r5
	add	r0, r1, r0
	ldrh	r0, [r0]
	cmp	r0, r3
	bcs	.L63	@cond_branch
	lsr	r0, r2, #0x1d
	add	r0, r1, r0
	strh	r4, [r0]
	b	.L63
.L90:
	.align	2, 0
.L89:
	.word	gSpecialVar_0x8006
	.word	0x270f
	.word	0xca9
	.word	0xe08
.L69:
	ldr	r0, .L91
	ldrh	r3, [r0]
	ldr	r0, .L91+0x4
	cmp	r3, r0
	bhi	.L63	@cond_branch
	ldr	r0, [r2]
	ldr	r2, .L91+0x8
	add	r1, r0, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x1e
	lsr	r1, r1, #0x1d
	ldr	r5, .L91+0xc
.L80:
	add	r0, r0, r5
	add	r0, r0, r1
	strh	r3, [r0]
	b	.L63
.L92:
	.align	2, 0
.L91:
	.word	gSpecialVar_0x8006
	.word	0x270f
	.word	0xca9
	.word	0xe0c
.L71:
	cmp	r3, #0
	beq	.L72	@cond_branch
	ldr	r0, .L93
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L73	@cond_branch
	ldr	r0, [r2]
	ldr	r1, .L93+0x4
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	r2, #0x80
	lsl	r2, r2, #0x4
	orr	r1, r1, r2
	b	.L81
.L94:
	.align	2, 0
.L93:
	.word	gSpecialVar_0x8006
	.word	0xcdc
.L73:
	ldr	r0, [r2]
	ldr	r2, .L95
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r2, .L95+0x4
	b	.L82
.L96:
	.align	2, 0
.L95:
	.word	0xcdc
	.word	-0x801
.L72:
	ldr	r0, .L97
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L76	@cond_branch
	ldr	r0, [r2]
	ldr	r5, .L97+0x4
	add	r0, r0, r5
	ldr	r1, [r0]
	mov	r2, #0x80
	lsl	r2, r2, #0x3
	orr	r1, r1, r2
	b	.L81
.L98:
	.align	2, 0
.L97:
	.word	gSpecialVar_0x8006
	.word	0xcdc
.L76:
	ldr	r0, [r2]
	ldr	r1, .L99
	add	r0, r0, r1
	ldr	r1, [r0]
	ldr	r2, .L99+0x4
.L82:
	and	r1, r1, r2
.L81:
	str	r1, [r0]
.L63:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L100:
	.align	2, 0
.L99:
	.word	0xcdc
	.word	-0x401
.Lfe5:
	.size	 SetBattlePikeData,.Lfe5-SetBattlePikeData
	.align	2, 0
	.type	 IsNextRoomFinal,function
	.thumb_func
IsNextRoomFinal:
	push	{lr}
	ldr	r0, .L105
	ldr	r0, [r0]
	ldr	r1, .L105+0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r0, #0xe
	bls	.L102	@cond_branch
	ldr	r1, .L105+0x8
	mov	r0, #0x1
	b	.L104
.L106:
	.align	2, 0
.L105:
	.word	gSaveBlock2Ptr
	.word	0xcb2
	.word	gSpecialVar_Result
.L102:
	ldr	r1, .L107
	mov	r0, #0x0
.L104:
	strh	r0, [r1]
	pop	{r0}
	bx	r0
.L108:
	.align	2, 0
.L107:
	.word	gSpecialVar_Result
.Lfe6:
	.size	 IsNextRoomFinal,.Lfe6-IsNextRoomFinal
	.align	2, 0
	.type	 GetRoomType,function
	.thumb_func
GetRoomType:
	ldr	r0, .L110
	ldr	r1, .L110+0x4
	ldrb	r1, [r1]
	strh	r1, [r0]
	bx	lr
.L111:
	.align	2, 0
.L110:
	.word	gSpecialVar_Result
	.word	sRoomType
.Lfe7:
	.size	 GetRoomType,.Lfe7-GetRoomType
	.align	2, 0
	.type	 SetInWildMonRoom,function
	.thumb_func
SetInWildMonRoom:
	ldr	r1, .L113
	mov	r0, #0x1
	strb	r0, [r1]
	bx	lr
.L114:
	.align	2, 0
.L113:
	.word	sInWildMonRoom
.Lfe8:
	.size	 SetInWildMonRoom,.Lfe8-SetInWildMonRoom
	.align	2, 0
	.type	 ClearInWildMonRoom,function
	.thumb_func
ClearInWildMonRoom:
	ldr	r1, .L116
	mov	r0, #0x0
	strb	r0, [r1]
	bx	lr
.L117:
	.align	2, 0
.L116:
	.word	sInWildMonRoom
.Lfe9:
	.size	 ClearInWildMonRoom,.Lfe9-ClearInWildMonRoom
	.align	2, 0
	.type	 SavePikeChallenge,function
	.thumb_func
SavePikeChallenge:
	push	{r4, lr}
	ldr	r4, .L119
	ldr	r0, [r4]
	ldr	r1, .L119+0x4
	ldrh	r1, [r1]
	ldr	r2, .L119+0x8
	add	r0, r0, r2
	strb	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x7
	mov	r1, #0x0
	bl	VarSet
	ldr	r1, [r4]
	ldr	r0, .L119+0xc
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r1]
	bl	save_serialize_map
	mov	r0, #0x1
	bl	TrySavingData
	pop	{r4}
	pop	{r0}
	bx	r0
.L120:
	.align	2, 0
.L119:
	.word	gSaveBlock2Ptr
	.word	gSpecialVar_0x8005
	.word	0xca8
	.word	0xca9
.Lfe10:
	.size	 SavePikeChallenge,.Lfe10-SavePikeChallenge
	.align	2, 0
	.type	 nullsub_76,function
	.thumb_func
nullsub_76:
	bx	lr
.Lfe11:
	.size	 nullsub_76,.Lfe11-nullsub_76
	.align	2, 0
	.type	 nullsub_124,function
	.thumb_func
nullsub_124:
	bx	lr
.Lfe12:
	.size	 nullsub_124,.Lfe12-nullsub_124
	.align	2, 0
	.type	 GetRoomInflictedStatus,function
	.thumb_func
GetRoomInflictedStatus:
	push	{lr}
	ldr	r0, .L134
	ldr	r0, [r0]
	cmp	r0, #0x20
	beq	.L125	@cond_branch
	cmp	r0, #0x20
	bhi	.L132	@cond_branch
	cmp	r0, #0x7
	beq	.L129	@cond_branch
	cmp	r0, #0x10
	beq	.L126	@cond_branch
	b	.L124
.L135:
	.align	2, 0
.L134:
	.word	sStatusFlags
.L132:
	cmp	r0, #0x40
	beq	.L128	@cond_branch
	cmp	r0, #0x80
	beq	.L127	@cond_branch
	b	.L124
.L125:
	ldr	r1, .L136
	mov	r0, #0x0
	b	.L133
.L137:
	.align	2, 0
.L136:
	.word	gSpecialVar_Result
.L126:
	ldr	r1, .L138
	mov	r0, #0x1
	b	.L133
.L139:
	.align	2, 0
.L138:
	.word	gSpecialVar_Result
.L127:
	ldr	r1, .L140
	mov	r0, #0x2
	b	.L133
.L141:
	.align	2, 0
.L140:
	.word	gSpecialVar_Result
.L128:
	ldr	r1, .L142
	mov	r0, #0x3
	b	.L133
.L143:
	.align	2, 0
.L142:
	.word	gSpecialVar_Result
.L129:
	ldr	r1, .L144
	mov	r0, #0x4
.L133:
	strh	r0, [r1]
.L124:
	pop	{r0}
	bx	r0
.L145:
	.align	2, 0
.L144:
	.word	gSpecialVar_Result
.Lfe13:
	.size	 GetRoomInflictedStatus,.Lfe13-GetRoomInflictedStatus
	.align	2, 0
	.type	 GetRoomInflictedStatusMon,function
	.thumb_func
GetRoomInflictedStatusMon:
	ldr	r0, .L147
	ldr	r1, .L147+0x4
	ldrb	r1, [r1]
	strh	r1, [r0]
	bx	lr
.L148:
	.align	2, 0
.L147:
	.word	gSpecialVar_Result
	.word	sStatusMon
.Lfe14:
	.size	 GetRoomInflictedStatusMon,.Lfe14-GetRoomInflictedStatusMon
	.align	2, 0
	.type	 HealOneOrTwoMons,function
	.thumb_func
HealOneOrTwoMons:
	push	{r4, lr}
	bl	Random
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r0, #0x1
	and	r4, r4, r0
	add	r4, r4, #0x1
	add	r0, r4, #0
	bl	TryHealMons
	ldr	r0, .L150
	strh	r4, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L151:
	.align	2, 0
.L150:
	.word	gSpecialVar_Result
.Lfe15:
	.size	 HealOneOrTwoMons,.Lfe15-HealOneOrTwoMons
	.section .rodata
	.type	 sText_Dia0,object
sText_Dia0:
	.byte	0xc3
	.byte	0xb4
	.byte	0xe1
	.byte	0x0
	.byte	0xe0
	.byte	0xe3
	.byte	0xe7
	.byte	0xe8
	.byte	0xad
	.byte	0xfe
	.byte	0x0
	.byte	0xc3
	.byte	0x0
	.byte	0xe2
	.byte	0xd9
	.byte	0xd9
	.byte	0xd8
	.byte	0x0
	.byte	0xd5
	.byte	0x0
	.byte	0xdc
	.byte	0xd9
	.byte	0xe0
	.byte	0xe4
	.byte	0xdd
	.byte	0xe2
	.byte	0xdb
	.byte	0x0
	.byte	0xdc
	.byte	0xd5
	.byte	0xe2
	.byte	0xd8
	.byte	0xad
	.byte	0xff
	.byte	0xff
	.size	 sText_Dia0,35
	.type	 sText_Dia1,object
sText_Dia1:
	.byte	0xc3
	.byte	0x0
	.byte	0xdc
	.byte	0xd5
	.byte	0xea
	.byte	0xd9
	.byte	0x0
	.byte	0xe2
	.byte	0xe3
	.byte	0x0
	.byte	0xdd
	.byte	0xd8
	.byte	0xd9
	.byte	0xd5
	.byte	0x0
	.byte	0xeb
	.byte	0xdc
	.byte	0xd9
	.byte	0xe6
	.byte	0xd9
	.byte	0x0
	.byte	0xc3
	.byte	0x0
	.byte	0xd5
	.byte	0xe1
	.byte	0xad
	.byte	0xff
	.byte	0xff
	.size	 sText_Dia1,28
	.type	 sText_Dia2,object
sText_Dia2:
	.byte	0xd1
	.byte	0xdc
	.byte	0xd5
	.byte	0xe8
	.byte	0x0
	.byte	0xe7
	.byte	0xdc
	.byte	0xe3
	.byte	0xe9
	.byte	0xe0
	.byte	0xd8
	.byte	0x0
	.byte	0xc3
	.byte	0x0
	.byte	0xd8
	.byte	0xe3
	.byte	0x0
	.byte	0xe2
	.byte	0xe3
	.byte	0xeb
	.byte	0xac
	.byte	0xff
	.byte	0xff
	.size	 sText_Dia2,23
	.type	 sText_Dia3,object
sText_Dia3:
	.byte	0xce
	.byte	0xdc
	.byte	0xdd
	.byte	0xe7
	.byte	0x0
	.byte	0xdd
	.byte	0xe7
	.byte	0x0
	.byte	0xe8
	.byte	0xe3
	.byte	0xe3
	.byte	0x0
	.byte	0xd9
	.byte	0xec
	.byte	0xd7
	.byte	0xdd
	.byte	0xe8
	.byte	0xdd
	.byte	0xe2
	.byte	0xdb
	.byte	0x0
	.byte	0xda
	.byte	0xe3
	.byte	0xe6
	.byte	0x0
	.byte	0xe1
	.byte	0xd9
	.byte	0xad
	.byte	0xff
	.byte	0xff
	.size	 sText_Dia3,30
	.type	 sText_Dia4,object
sText_Dia4:
	.byte	0xbe
	.byte	0xdd
	.byte	0xd8
	.byte	0x0
	.byte	0xed
	.byte	0xe3
	.byte	0xe9
	.byte	0x0
	.byte	0xe1
	.byte	0xd5
	.byte	0xdf
	.byte	0xd9
	.byte	0x0
	.byte	0xd5
	.byte	0x0
	.byte	0xe1
	.byte	0xdd
	.byte	0xe7
	.byte	0xe8
	.byte	0xd5
	.byte	0xdf
	.byte	0xd9
	.byte	0xac
	.byte	0xff
	.byte	0xff
	.size	 sText_Dia4,25
	.type	 sText_Dia5,object
sText_Dia5:
	.byte	0xc3
	.byte	0xe8
	.byte	0xb4
	.byte	0xe7
	.byte	0x0
	.byte	0xe1
	.byte	0xd9
	.byte	0xd5
	.byte	0xe2
	.byte	0x0
	.byte	0xd5
	.byte	0xe2
	.byte	0xd8
	.byte	0x0
	.byte	0xd5
	.byte	0xeb
	.byte	0xda
	.byte	0xe9
	.byte	0xe0
	.byte	0x0
	.byte	0xdd
	.byte	0xe2
	.byte	0x0
	.byte	0xdc
	.byte	0xd9
	.byte	0xe6
	.byte	0xd9
	.byte	0xad
	.byte	0xff
	.byte	0xff
	.size	 sText_Dia5,30
	.type	 sText_Dia6,object
sText_Dia6:
	.byte	0xc3
	.byte	0xb4
	.byte	0xe1
	.byte	0x0
	.byte	0xe7
	.byte	0xe3
	.byte	0x0
	.byte	0xe8
	.byte	0xdd
	.byte	0xe6
	.byte	0xd9
	.byte	0xd8
	.byte	0x0
	.byte	0xe3
	.byte	0xda
	.byte	0x0
	.byte	0xe8
	.byte	0xdc
	.byte	0xdd
	.byte	0xe7
	.byte	0x0
	.byte	0xe4
	.byte	0xe0
	.byte	0xd5
	.byte	0xd7
	.byte	0xd9
	.byte	0xad
	.byte	0xff
	.byte	0xff
	.size	 sText_Dia6,29
	.type	 sText_Dia7,object
sText_Dia7:
	.byte	0xc3
	.byte	0x0
	.byte	0xe5
	.byte	0xe9
	.byte	0xdd
	.byte	0xe8
	.byte	0xd9
	.byte	0x0
	.byte	0xd9
	.byte	0xe2
	.byte	0xde
	.byte	0xe3
	.byte	0xed
	.byte	0x0
	.byte	0xe8
	.byte	0xdc
	.byte	0xdd
	.byte	0xe7
	.byte	0x0
	.byte	0xd7
	.byte	0xdc
	.byte	0xd5
	.byte	0xe0
	.byte	0xe0
	.byte	0xd9
	.byte	0xe2
	.byte	0xdb
	.byte	0xd9
	.byte	0xad
	.byte	0xff
	.byte	0xff
	.size	 sText_Dia7,31
	.type	 sText_Dia8,object
sText_Dia8:
	.byte	0xc6
	.byte	0xe3
	.byte	0xe3
	.byte	0xdf
	.byte	0x0
	.byte	0xd5
	.byte	0xe8
	.byte	0x0
	.byte	0xdc
	.byte	0xe3
	.byte	0xeb
	.byte	0x0
	.byte	0xc3
	.byte	0x0
	.byte	0xe8
	.byte	0xd5
	.byte	0xd7
	.byte	0xdf
	.byte	0xe0
	.byte	0xd9
	.byte	0x0
	.byte	0xe8
	.byte	0xdc
	.byte	0xdd
	.byte	0xe7
	.byte	0xad
	.byte	0xff
	.byte	0xff
	.size	 sText_Dia8,28
	.type	 sText_Dia9,object
sText_Dia9:
	.byte	0xcc
	.byte	0xd9
	.byte	0xd5
	.byte	0xd8
	.byte	0xed
	.byte	0x0
	.byte	0xe8
	.byte	0xe3
	.byte	0x0
	.byte	0xdb
	.byte	0xdd
	.byte	0xea
	.byte	0xd9
	.byte	0x0
	.byte	0xe9
	.byte	0xe4
	.byte	0x0
	.byte	0xed
	.byte	0xd9
	.byte	0xe8
	.byte	0xac
	.byte	0xad
	.byte	0xff
	.byte	0xff
	.size	 sText_Dia9,24
	.type	 sText_Dia10,object
sText_Dia10:
	.byte	0xc9
	.byte	0xdc
	.byte	0x0
	.byte	0xe2
	.byte	0xe3
	.byte	0xab
	.byte	0x0
	.byte	0xd1
	.byte	0xdc
	.byte	0xe3
	.byte	0x0
	.byte	0xd5
	.byte	0xe6
	.byte	0xd9
	.byte	0x0
	.byte	0xed
	.byte	0xe3
	.byte	0xe9
	.byte	0xac
	.byte	0xff
	.byte	0xff
	.size	 sText_Dia10,21
	.type	 sText_Dia11,object
sText_Dia11:
	.byte	0xc3
	.byte	0xb4
	.byte	0xea
	.byte	0xd9
	.byte	0x0
	.byte	0xd6
	.byte	0xd9
	.byte	0xd9
	.byte	0xe2
	.byte	0x0
	.byte	0xeb
	.byte	0xd5
	.byte	0xe2
	.byte	0xd8
	.byte	0xd9
	.byte	0xe6
	.byte	0xdd
	.byte	0xe2
	.byte	0xdb
	.byte	0x0
	.byte	0xda
	.byte	0xe3
	.byte	0xe6
	.byte	0x0
	.byte	0xd5
	.byte	0xd6
	.byte	0xe3
	.byte	0xe9
	.byte	0xe8
	.byte	0x0
	.byte	0xda
	.byte	0xe3
	.byte	0xe6
	.byte	0xd9
	.byte	0xea
	.byte	0xd9
	.byte	0xe6
	.byte	0xad
	.byte	0xad
	.byte	0xad
	.byte	0xff
	.byte	0xff
	.size	 sText_Dia11,42
	.type	 sText_Dia12,object
sText_Dia12:
	.byte	0xc3
	.byte	0x0
	.byte	0xe8
	.byte	0xdc
	.byte	0xdd
	.byte	0xe2
	.byte	0xdf
	.byte	0x0
	.byte	0xc3
	.byte	0xb4
	.byte	0xe0
	.byte	0xe0
	.byte	0x0
	.byte	0xdb
	.byte	0xdd
	.byte	0xea
	.byte	0xd9
	.byte	0x0
	.byte	0xe9
	.byte	0xe4
	.byte	0x0
	.byte	0xe2
	.byte	0xe3
	.byte	0xeb
	.byte	0xad
	.byte	0xff
	.byte	0xff
	.size	 sText_Dia12,27
	.type	 sText_Dia13,object
sText_Dia13:
	.byte	0xd1
	.byte	0xdc
	.byte	0xd5
	.byte	0xe8
	.byte	0x0
	.byte	0xe7
	.byte	0xdc
	.byte	0xe3
	.byte	0xe9
	.byte	0xe0
	.byte	0xd8
	.byte	0x0
	.byte	0xc3
	.byte	0x0
	.byte	0xd8
	.byte	0xe3
	.byte	0x0
	.byte	0xe2
	.byte	0xd9
	.byte	0xec
	.byte	0xe8
	.byte	0xac
	.byte	0xff
	.byte	0xff
	.size	 sText_Dia13,24
	.type	 sText_Dia14,object
sText_Dia14:
	.byte	0xcc
	.byte	0xd9
	.byte	0xd5
	.byte	0xd8
	.byte	0xed
	.byte	0x0
	.byte	0xe8
	.byte	0xe3
	.byte	0x0
	.byte	0xdb
	.byte	0xdd
	.byte	0xea
	.byte	0xd9
	.byte	0x0
	.byte	0xe9
	.byte	0xe4
	.byte	0x0
	.byte	0xed
	.byte	0xd9
	.byte	0xe8
	.byte	0xac
	.byte	0xad
	.byte	0xff
	.byte	0xff
	.size	 sText_Dia14,24
	.type	 sText_Dia15,object
sText_Dia15:
	.byte	0xc3
	.byte	0x0
	.byte	0xd7
	.byte	0xd5
	.byte	0xe2
	.byte	0x0
	.byte	0xeb
	.byte	0xdd
	.byte	0xe2
	.byte	0x0
	.byte	0xeb
	.byte	0xdd
	.byte	0xe8
	.byte	0xdc
	.byte	0x0
	.byte	0xe1
	.byte	0xed
	.byte	0x0
	.byte	0xe7
	.byte	0xdc
	.byte	0xd9
	.byte	0xd9
	.byte	0xe6
	.byte	0x0
	.byte	0xdb
	.byte	0xd9
	.byte	0xe2
	.byte	0xdd
	.byte	0xe9
	.byte	0xe7
	.byte	0xab
	.byte	0xff
	.byte	0xff
	.size	 sText_Dia15,33
	.type	 sText_Dia16,object
sText_Dia16:
	.byte	0xd1
	.byte	0xe3
	.byte	0xe2
	.byte	0xb4
	.byte	0xe8
	.byte	0x0
	.byte	0xe7
	.byte	0xe3
	.byte	0xe1
	.byte	0xd9
	.byte	0xe3
	.byte	0xe2
	.byte	0xd9
	.byte	0x0
	.byte	0xd7
	.byte	0xe3
	.byte	0xe3
	.byte	0xe0
	.byte	0x0
	.byte	0xe7
	.byte	0xdc
	.byte	0xe3
	.byte	0xeb
	.byte	0x0
	.byte	0xe9
	.byte	0xe4
	.byte	0xac
	.byte	0xff
	.byte	0xff
	.size	 sText_Dia16,29
	.type	 sText_Dia17,object
sText_Dia17:
	.byte	0xce
	.byte	0xdc
	.byte	0xd9
	.byte	0x0
	.byte	0xbc
	.byte	0xd5
	.byte	0xe8
	.byte	0xe8
	.byte	0xe0
	.byte	0xd9
	.byte	0x0
	.byte	0xca
	.byte	0xdd
	.byte	0xdf
	.byte	0xd9
	.byte	0x0
	.byte	0xdd
	.byte	0xe7
	.byte	0x0
	.byte	0xd5
	.byte	0xeb
	.byte	0xd9
	.byte	0xe7
	.byte	0xe3
	.byte	0xe1
	.byte	0xd9
	.byte	0xab
	.byte	0xff
	.byte	0xff
	.size	 sText_Dia17,29
	.type	 sText_Dia18,object
sText_Dia18:
	.byte	0xc3
	.byte	0x0
	.byte	0xd7
	.byte	0xd5
	.byte	0xe2
	.byte	0xb4
	.byte	0xe8
	.byte	0x0
	.byte	0xe8
	.byte	0xd5
	.byte	0xdf
	.byte	0xd9
	.byte	0x0
	.byte	0xe8
	.byte	0xdc
	.byte	0xdd
	.byte	0xe7
	.byte	0x0
	.byte	0xd5
	.byte	0xe2
	.byte	0xed
	.byte	0x0
	.byte	0xe1
	.byte	0xe3
	.byte	0xe6
	.byte	0xd9
	.byte	0xab
	.byte	0xff
	.byte	0xff
	.size	 sText_Dia18,29
	.type	 sText_Dia19,object
sText_Dia19:
	.byte	0xc3
	.byte	0x0
	.byte	0xd8
	.byte	0xe3
	.byte	0xe2
	.byte	0xb4
	.byte	0xe8
	.byte	0x0
	.byte	0xdf
	.byte	0xe2
	.byte	0xe3
	.byte	0xeb
	.byte	0x0
	.byte	0xdd
	.byte	0xda
	.byte	0x0
	.byte	0xe8
	.byte	0xdc
	.byte	0xdd
	.byte	0xe7
	.byte	0x0
	.byte	0xdd
	.byte	0xe7
	.byte	0x0
	.byte	0xc9
	.byte	0xc5
	.byte	0xad
	.byte	0xff
	.byte	0xff
	.size	 sText_Dia19,29
	.type	 sText_Dia20,object
sText_Dia20:
	.byte	0xc3
	.byte	0xb4
	.byte	0xea
	.byte	0xd9
	.byte	0x0
	.byte	0xdb
	.byte	0xe3
	.byte	0xe8
	.byte	0x0
	.byte	0xe8
	.byte	0xe3
	.byte	0x0
	.byte	0xe4
	.byte	0xdd
	.byte	0xd7
	.byte	0xdf
	.byte	0x0
	.byte	0xe0
	.byte	0xd9
	.byte	0xda
	.byte	0xe8
	.byte	0x0
	.byte	0xe2
	.byte	0xd9
	.byte	0xec
	.byte	0xe8
	.byte	0xad
	.byte	0xff
	.byte	0xff
	.size	 sText_Dia20,29
	.type	 sText_Dia21,object
sText_Dia21:
	.byte	0xc3
	.byte	0xe8
	.byte	0x0
	.byte	0xe1
	.byte	0xe9
	.byte	0xe7
	.byte	0xe8
	.byte	0x0
	.byte	0xd6
	.byte	0xd9
	.byte	0x0
	.byte	0xe3
	.byte	0xea
	.byte	0xd9
	.byte	0xe6
	.byte	0x0
	.byte	0xe7
	.byte	0xe3
	.byte	0xe3
	.byte	0xe2
	.byte	0xb8
	.byte	0x0
	.byte	0xe6
	.byte	0xdd
	.byte	0xdb
	.byte	0xdc
	.byte	0xe8
	.byte	0xac
	.byte	0xff
	.byte	0xff
	.size	 sText_Dia21,30
	.type	 sText_Dia22,object
sText_Dia22:
	.byte	0xce
	.byte	0xdc
	.byte	0xdd
	.byte	0xe7
	.byte	0x0
	.byte	0xdd
	.byte	0xe7
	.byte	0x0
	.byte	0xe8
	.byte	0xe3
	.byte	0xe8
	.byte	0xd5
	.byte	0xe0
	.byte	0xe0
	.byte	0xed
	.byte	0x0
	.byte	0xd9
	.byte	0xd5
	.byte	0xe7
	.byte	0xed
	.byte	0xb8
	.byte	0x0
	.byte	0xed
	.byte	0xd9
	.byte	0xd5
	.byte	0xdc
	.byte	0xac
	.byte	0xff
	.byte	0xff
	.size	 sText_Dia22,29
	.type	 sText_Dia23,object
sText_Dia23:
	.byte	0xc3
	.byte	0xb4
	.byte	0xe1
	.byte	0x0
	.byte	0xdb
	.byte	0xe3
	.byte	0xdd
	.byte	0xe2
	.byte	0xdb
	.byte	0x0
	.byte	0xe8
	.byte	0xe3
	.byte	0x0
	.byte	0xe4
	.byte	0xe3
	.byte	0xeb
	.byte	0xd9
	.byte	0xe6
	.byte	0x0
	.byte	0xe3
	.byte	0xe2
	.byte	0xad
	.byte	0xff
	.byte	0xff
	.size	 sText_Dia23,24
	.type	 sText_Dia24,object
sText_Dia24:
	.byte	0xce
	.byte	0xdc
	.byte	0xd9
	.byte	0xe6
	.byte	0xd9
	.byte	0xb4
	.byte	0xe7
	.byte	0x0
	.byte	0xe2
	.byte	0xe3
	.byte	0x0
	.byte	0xeb
	.byte	0xd5
	.byte	0xed
	.byte	0x0
	.byte	0xc3
	.byte	0x0
	.byte	0xd7
	.byte	0xd5
	.byte	0xe2
	.byte	0x0
	.byte	0xdb
	.byte	0xdd
	.byte	0xea
	.byte	0xd9
	.byte	0x0
	.byte	0xe9
	.byte	0xe4
	.byte	0x0
	.byte	0xe2
	.byte	0xe3
	.byte	0xeb
	.byte	0xad
	.byte	0xff
	.byte	0xff
	.size	 sText_Dia24,35
	.type	 sText_Dia25,object
sText_Dia25:
	.byte	0xc3
	.byte	0xb4
	.byte	0xe1
	.byte	0x0
	.byte	0xe2
	.byte	0xe3
	.byte	0xe8
	.byte	0x0
	.byte	0xdb
	.byte	0xe3
	.byte	0xdd
	.byte	0xe2
	.byte	0xdb
	.byte	0x0
	.byte	0xe8
	.byte	0xe3
	.byte	0x0
	.byte	0xe1
	.byte	0xd5
	.byte	0xdf
	.byte	0xd9
	.byte	0x0
	.byte	0xdd
	.byte	0xe8
	.byte	0xab
	.byte	0xff
	.byte	0xff
	.size	 sText_Dia25,27
	.type	 sText_Dia26,object
sText_Dia26:
	.byte	0xc1
	.byte	0xe3
	.byte	0x0
	.byte	0xe3
	.byte	0xe2
	.byte	0x0
	.byte	0xd5
	.byte	0xdc
	.byte	0xd9
	.byte	0xd5
	.byte	0xd8
	.byte	0xad
	.byte	0x0
	.byte	0xc3
	.byte	0xb4
	.byte	0xe1
	.byte	0x0
	.byte	0xd8
	.byte	0xe3
	.byte	0xe2
	.byte	0xd9
	.byte	0x0
	.byte	0xda
	.byte	0xe3
	.byte	0xe6
	.byte	0xad
	.byte	0xff
	.byte	0xff
	.size	 sText_Dia26,28
	.type	 sText_Dia27,object
sText_Dia27:
	.byte	0xc3
	.byte	0xe8
	.byte	0xb4
	.byte	0xe7
	.byte	0x0
	.byte	0xe3
	.byte	0xe2
	.byte	0xd9
	.byte	0x0
	.byte	0xe8
	.byte	0xe6
	.byte	0xd5
	.byte	0xdd
	.byte	0xe2
	.byte	0xd9
	.byte	0xe6
	.byte	0x0
	.byte	0xd5
	.byte	0xda
	.byte	0xe8
	.byte	0xd9
	.byte	0xe6
	.byte	0x0
	.byte	0xd5
	.byte	0xe2
	.byte	0xe3
	.byte	0xe8
	.byte	0xdc
	.byte	0xd9
	.byte	0xe6
	.byte	0xad
	.byte	0xad
	.byte	0xad
	.byte	0xff
	.byte	0xff
	.size	 sText_Dia27,35
	.type	 sText_Dia28,object
sText_Dia28:
	.byte	0xbe
	.byte	0xe3
	.byte	0x0
	.byte	0xed
	.byte	0xe3
	.byte	0xe9
	.byte	0x0
	.byte	0xe0
	.byte	0xdd
	.byte	0xdf
	.byte	0xd9
	.byte	0x0
	.byte	0xcd
	.byte	0xe8
	.byte	0xd9
	.byte	0xd9
	.byte	0xe0
	.byte	0xae
	.byte	0xe8
	.byte	0xed
	.byte	0xe4
	.byte	0xd9
	.byte	0xe7
	.byte	0xac
	.byte	0xff
	.byte	0xff
	.size	 sText_Dia28,26
	.type	 sText_Dia29,object
sText_Dia29:
	.byte	0xbf
	.byte	0xea
	.byte	0xd9
	.byte	0xe6
	.byte	0xed
	.byte	0x0
	.byte	0xe8
	.byte	0xe6
	.byte	0xd5
	.byte	0xdd
	.byte	0xe2
	.byte	0xd9
	.byte	0xe6
	.byte	0x0
	.byte	0xdc
	.byte	0xd9
	.byte	0xe6
	.byte	0xd9
	.byte	0xb4
	.byte	0xe7
	.byte	0x0
	.byte	0xe7
	.byte	0xe3
	.byte	0x0
	.byte	0xeb
	.byte	0xd9
	.byte	0xd5
	.byte	0xdf
	.byte	0xad
	.byte	0xff
	.byte	0xff
	.size	 sText_Dia29,31
	.type	 sText_Dia30,object
sText_Dia30:
	.byte	0xbe
	.byte	0xe3
	.byte	0x0
	.byte	0xed
	.byte	0xe3
	.byte	0xe9
	.byte	0x0
	.byte	0xe8
	.byte	0xdc
	.byte	0xdd
	.byte	0xe2
	.byte	0xdf
	.byte	0x0
	.byte	0xe8
	.byte	0xdc
	.byte	0xdd
	.byte	0xe7
	.byte	0xb4
	.byte	0xe7
	.byte	0x0
	.byte	0xd9
	.byte	0xd5
	.byte	0xe7
	.byte	0xed
	.byte	0xac
	.byte	0xff
	.byte	0xff
	.size	 sText_Dia30,27
	.type	 sText_Dia31,object
sText_Dia31:
	.byte	0xd1
	.byte	0xdc
	.byte	0xd5
	.byte	0xe8
	.byte	0xb4
	.byte	0xe0
	.byte	0xe0
	.byte	0x0
	.byte	0xd6
	.byte	0xd9
	.byte	0x0
	.byte	0xe2
	.byte	0xd9
	.byte	0xec
	.byte	0xe8
	.byte	0xac
	.byte	0xff
	.byte	0xff
	.size	 sText_Dia31,18
	.type	 sText_Dia32,object
sText_Dia32:
	.byte	0xc3
	.byte	0xb4
	.byte	0xe1
	.byte	0x0
	.byte	0xde
	.byte	0xe9
	.byte	0xe7
	.byte	0xe8
	.byte	0x0
	.byte	0xe7
	.byte	0xe3
	.byte	0x0
	.byte	0xd7
	.byte	0xe3
	.byte	0xe2
	.byte	0xda
	.byte	0xe9
	.byte	0xe7
	.byte	0xd9
	.byte	0xd8
	.byte	0xab
	.byte	0xff
	.byte	0xff
	.size	 sText_Dia32,23
	.type	 sText_Dia33,object
sText_Dia33:
	.byte	0xc3
	.byte	0x0
	.byte	0xde
	.byte	0xe9
	.byte	0xe7
	.byte	0xe8
	.byte	0x0
	.byte	0xeb
	.byte	0xd5
	.byte	0xe2
	.byte	0xe8
	.byte	0x0
	.byte	0xe8
	.byte	0xe3
	.byte	0x0
	.byte	0xdb
	.byte	0xe3
	.byte	0x0
	.byte	0xdc
	.byte	0xe3
	.byte	0xe1
	.byte	0xd9
	.byte	0xad
	.byte	0xad
	.byte	0xad
	.byte	0xff
	.byte	0xff
	.size	 sText_Dia33,27
	.type	 sText_Dia34,object
sText_Dia34:
	.byte	0xd3
	.byte	0xd9
	.byte	0xd9
	.byte	0xdc
	.byte	0xd5
	.byte	0xeb
	.byte	0xab
	.byte	0x0
	.byte	0xce
	.byte	0xdc
	.byte	0xdd
	.byte	0xe7
	.byte	0x0
	.byte	0xe4
	.byte	0xe0
	.byte	0xd5
	.byte	0xd7
	.byte	0xd9
	.byte	0x0
	.byte	0xdd
	.byte	0xe7
	.byte	0x0
	.byte	0xd5
	.byte	0x0
	.byte	0xe4
	.byte	0xe9
	.byte	0xe7
	.byte	0xdc
	.byte	0xe3
	.byte	0xea
	.byte	0xd9
	.byte	0xe6
	.byte	0xad
	.byte	0xff
	.byte	0xff
	.size	 sText_Dia34,35
	.type	 sText_Dia35,object
sText_Dia35:
	.byte	0xc3
	.byte	0x0
	.byte	0xdc
	.byte	0xd5
	.byte	0xea
	.byte	0xd9
	.byte	0xe2
	.byte	0xb4
	.byte	0xe8
	.byte	0x0
	.byte	0xd6
	.byte	0xd9
	.byte	0xd9
	.byte	0xe2
	.byte	0x0
	.byte	0xdd
	.byte	0xe2
	.byte	0x0
	.byte	0xd5
	.byte	0x0
	.byte	0xd6
	.byte	0xd5
	.byte	0xe8
	.byte	0xe8
	.byte	0xe0
	.byte	0xd9
	.byte	0x0
	.byte	0xed
	.byte	0xd9
	.byte	0xe8
	.byte	0xad
	.byte	0xff
	.byte	0xff
	.size	 sText_Dia35,33
	.type	 sText_Dia36,object
sText_Dia36:
	.byte	0xc7
	.byte	0xd5
	.byte	0xed
	.byte	0xd6
	.byte	0xd9
	.byte	0x0
	.byte	0xdd
	.byte	0xe8
	.byte	0xb4
	.byte	0xe7
	.byte	0x0
	.byte	0xe6
	.byte	0xdd
	.byte	0xdb
	.byte	0xdc
	.byte	0xe8
	.byte	0x0
	.byte	0xe2
	.byte	0xd9
	.byte	0xec
	.byte	0xe8
	.byte	0xac
	.byte	0x0
	.byte	0xc3
	.byte	0x0
	.byte	0xdc
	.byte	0xe3
	.byte	0xe4
	.byte	0xd9
	.byte	0x0
	.byte	0xe7
	.byte	0xe3
	.byte	0xad
	.byte	0xad
	.byte	0xad
	.byte	0xff
	.byte	0xff
	.size	 sText_Dia36,37
	.type	 sText_Dia37,object
sText_Dia37:
	.byte	0xd1
	.byte	0xd5
	.byte	0xd5
	.byte	0xdc
	.byte	0xab
	.byte	0x0
	.byte	0xc3
	.byte	0xe8
	.byte	0x0
	.byte	0xeb
	.byte	0xd5
	.byte	0xe7
	.byte	0xe2
	.byte	0xb4
	.byte	0xe8
	.byte	0x0
	.byte	0xe8
	.byte	0xdc
	.byte	0xdd
	.byte	0xe7
	.byte	0x0
	.byte	0xeb
	.byte	0xd5
	.byte	0xed
	.byte	0xab
	.byte	0xff
	.byte	0xff
	.size	 sText_Dia37,27
	.type	 sText_Dia38,object
sText_Dia38:
	.byte	0xc7
	.byte	0xed
	.byte	0x0
	.byte	0xca
	.byte	0xe3
	.byte	0xdf
	.byte	0x1b
	.byte	0xe1
	.byte	0xe3
	.byte	0xe2
	.byte	0x0
	.byte	0xd5
	.byte	0xe6
	.byte	0xd9
	.byte	0x0
	.byte	0xe8
	.byte	0xe3
	.byte	0xe3
	.byte	0x0
	.byte	0xe8
	.byte	0xdd
	.byte	0xe6
	.byte	0xd9
	.byte	0xd8
	.byte	0xad
	.byte	0xad
	.byte	0xad
	.byte	0xff
	.byte	0xff
	.size	 sText_Dia38,29
	.type	 sText_Dia39,object
sText_Dia39:
	.byte	0xc7
	.byte	0xed
	.byte	0x0
	.byte	0xca
	.byte	0xe3
	.byte	0xdf
	.byte	0x1b
	.byte	0xe1
	.byte	0xe3
	.byte	0xe2
	.byte	0x0
	.byte	0xd5
	.byte	0xe6
	.byte	0xd9
	.byte	0xe2
	.byte	0xb4
	.byte	0xe8
	.byte	0x0
	.byte	0xeb
	.byte	0xd9
	.byte	0xd5
	.byte	0xdf
	.byte	0x0
	.byte	0xe8
	.byte	0xe3
	.byte	0x0
	.byte	0xe4
	.byte	0xe3
	.byte	0xdd
	.byte	0xe7
	.byte	0xe3
	.byte	0xe2
	.byte	0xad
	.byte	0xff
	.byte	0xff
	.size	 sText_Dia39,35
	.type	 sText_Dia40,object
sText_Dia40:
	.byte	0xc6
	.byte	0xd5
	.byte	0xe0
	.byte	0xd5
	.byte	0xe0
	.byte	0xd5
	.byte	0xab
	.byte	0x0
	.byte	0xc6
	.byte	0xd5
	.byte	0xe0
	.byte	0xd5
	.byte	0xe0
	.byte	0xd5
	.byte	0xab
	.byte	0x0
	.byte	0xc3
	.byte	0xb4
	.byte	0xe1
	.byte	0x0
	.byte	0xe7
	.byte	0xe3
	.byte	0x0
	.byte	0xd5
	.byte	0xeb
	.byte	0xd9
	.byte	0xe7
	.byte	0xe3
	.byte	0xe1
	.byte	0xd9
	.byte	0xab
	.byte	0xff
	.byte	0xff
	.size	 sText_Dia40,33
	.type	 sText_Dia41,object
sText_Dia41:
	.byte	0xce
	.byte	0xe3
	.byte	0xec
	.byte	0xdd
	.byte	0xd7
	.byte	0x0
	.byte	0xdd
	.byte	0xe7
	.byte	0x0
	.byte	0xd5
	.byte	0x0
	.byte	0xe8
	.byte	0xd9
	.byte	0xe6
	.byte	0xe6
	.byte	0xdd
	.byte	0xd6
	.byte	0xe0
	.byte	0xd9
	.byte	0x0
	.byte	0xe8
	.byte	0xdc
	.byte	0xdd
	.byte	0xe2
	.byte	0xdb
	.byte	0xb8
	.byte	0x0
	.byte	0xdd
	.byte	0xe7
	.byte	0xe2
	.byte	0xb4
	.byte	0xe8
	.byte	0x0
	.byte	0xdd
	.byte	0xe8
	.byte	0xac
	.byte	0xff
	.byte	0xff
	.size	 sText_Dia41,38
.text
	.align	2, 0
	.type	 BufferNPCMessage,function
	.thumb_func
BufferNPCMessage:
	push	{lr}
	ldr	r0, .L202
	ldr	r0, [r0]
	ldr	r1, .L202+0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r0, #0x4
	bhi	.L153	@cond_branch
	ldr	r1, .L202+0x8
	ldr	r0, .L202+0xc
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0, #0x2]
	b	.L154
.L203:
	.align	2, 0
.L202:
	.word	gSaveBlock2Ptr
	.word	0xcb2
	.word	sNPCTable
	.word	sNpcId
.L153:
	cmp	r0, #0xa
	bhi	.L155	@cond_branch
	ldr	r1, .L204
	ldr	r0, .L204+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0, #0x3]
	b	.L154
.L205:
	.align	2, 0
.L204:
	.word	sNPCTable
	.word	sNpcId
.L155:
	ldr	r1, .L206
	ldr	r0, .L206+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0, #0x4]
.L154:
	cmp	r0, #0x29
	bls	.LCB1003
	b	.L157	@long jump
.LCB1003:
	lsl	r0, r0, #0x2
	ldr	r1, .L206+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L207:
	.align	2, 0
.L206:
	.word	sNPCTable
	.word	sNpcId
	.word	.L200
	.align	2, 0
	.align	2, 0
.L200:
	.word	.L158
	.word	.L159
	.word	.L160
	.word	.L161
	.word	.L162
	.word	.L163
	.word	.L164
	.word	.L165
	.word	.L166
	.word	.L167
	.word	.L168
	.word	.L169
	.word	.L170
	.word	.L171
	.word	.L172
	.word	.L173
	.word	.L174
	.word	.L175
	.word	.L176
	.word	.L177
	.word	.L178
	.word	.L179
	.word	.L180
	.word	.L181
	.word	.L182
	.word	.L183
	.word	.L184
	.word	.L185
	.word	.L186
	.word	.L187
	.word	.L188
	.word	.L189
	.word	.L190
	.word	.L191
	.word	.L192
	.word	.L193
	.word	.L194
	.word	.L195
	.word	.L196
	.word	.L197
	.word	.L198
	.word	.L199
.L158:
	ldr	r0, .L208
	ldr	r1, .L208+0x4
	bl	StringCopy
	b	.L157
.L209:
	.align	2, 0
.L208:
	.word	gStringVar4
	.word	sText_Dia0
.L159:
	ldr	r0, .L210
	ldr	r1, .L210+0x4
	bl	StringCopy
	b	.L157
.L211:
	.align	2, 0
.L210:
	.word	gStringVar4
	.word	sText_Dia1
.L160:
	ldr	r0, .L212
	ldr	r1, .L212+0x4
	bl	StringCopy
	b	.L157
.L213:
	.align	2, 0
.L212:
	.word	gStringVar4
	.word	sText_Dia2
.L161:
	ldr	r0, .L214
	ldr	r1, .L214+0x4
	bl	StringCopy
	b	.L157
.L215:
	.align	2, 0
.L214:
	.word	gStringVar4
	.word	sText_Dia3
.L162:
	ldr	r0, .L216
	ldr	r1, .L216+0x4
	bl	StringCopy
	b	.L157
.L217:
	.align	2, 0
.L216:
	.word	gStringVar4
	.word	sText_Dia4
.L163:
	ldr	r0, .L218
	ldr	r1, .L218+0x4
	bl	StringCopy
	b	.L157
.L219:
	.align	2, 0
.L218:
	.word	gStringVar4
	.word	sText_Dia5
.L164:
	ldr	r0, .L220
	ldr	r1, .L220+0x4
	bl	StringCopy
	b	.L157
.L221:
	.align	2, 0
.L220:
	.word	gStringVar4
	.word	sText_Dia6
.L165:
	ldr	r0, .L222
	ldr	r1, .L222+0x4
	bl	StringCopy
	b	.L157
.L223:
	.align	2, 0
.L222:
	.word	gStringVar4
	.word	sText_Dia7
.L166:
	ldr	r0, .L224
	ldr	r1, .L224+0x4
	bl	StringCopy
	b	.L157
.L225:
	.align	2, 0
.L224:
	.word	gStringVar4
	.word	sText_Dia8
.L167:
	ldr	r0, .L226
	ldr	r1, .L226+0x4
	bl	StringCopy
	b	.L157
.L227:
	.align	2, 0
.L226:
	.word	gStringVar4
	.word	sText_Dia9
.L168:
	ldr	r0, .L228
	ldr	r1, .L228+0x4
	bl	StringCopy
	b	.L157
.L229:
	.align	2, 0
.L228:
	.word	gStringVar4
	.word	sText_Dia10
.L169:
	ldr	r0, .L230
	ldr	r1, .L230+0x4
	bl	StringCopy
	b	.L157
.L231:
	.align	2, 0
.L230:
	.word	gStringVar4
	.word	sText_Dia11
.L170:
	ldr	r0, .L232
	ldr	r1, .L232+0x4
	bl	StringCopy
	b	.L157
.L233:
	.align	2, 0
.L232:
	.word	gStringVar4
	.word	sText_Dia12
.L171:
	ldr	r0, .L234
	ldr	r1, .L234+0x4
	bl	StringCopy
	b	.L157
.L235:
	.align	2, 0
.L234:
	.word	gStringVar4
	.word	sText_Dia13
.L172:
	ldr	r0, .L236
	ldr	r1, .L236+0x4
	bl	StringCopy
	b	.L157
.L237:
	.align	2, 0
.L236:
	.word	gStringVar4
	.word	sText_Dia14
.L173:
	ldr	r0, .L238
	ldr	r1, .L238+0x4
	bl	StringCopy
	b	.L157
.L239:
	.align	2, 0
.L238:
	.word	gStringVar4
	.word	sText_Dia15
.L174:
	ldr	r0, .L240
	ldr	r1, .L240+0x4
	bl	StringCopy
	b	.L157
.L241:
	.align	2, 0
.L240:
	.word	gStringVar4
	.word	sText_Dia16
.L175:
	ldr	r0, .L242
	ldr	r1, .L242+0x4
	bl	StringCopy
	b	.L157
.L243:
	.align	2, 0
.L242:
	.word	gStringVar4
	.word	sText_Dia17
.L176:
	ldr	r0, .L244
	ldr	r1, .L244+0x4
	bl	StringCopy
	b	.L157
.L245:
	.align	2, 0
.L244:
	.word	gStringVar4
	.word	sText_Dia18
.L177:
	ldr	r0, .L246
	ldr	r1, .L246+0x4
	bl	StringCopy
	b	.L157
.L247:
	.align	2, 0
.L246:
	.word	gStringVar4
	.word	sText_Dia19
.L178:
	ldr	r0, .L248
	ldr	r1, .L248+0x4
	bl	StringCopy
	b	.L157
.L249:
	.align	2, 0
.L248:
	.word	gStringVar4
	.word	sText_Dia20
.L179:
	ldr	r0, .L250
	ldr	r1, .L250+0x4
	bl	StringCopy
	b	.L157
.L251:
	.align	2, 0
.L250:
	.word	gStringVar4
	.word	sText_Dia21
.L180:
	ldr	r0, .L252
	ldr	r1, .L252+0x4
	bl	StringCopy
	b	.L157
.L253:
	.align	2, 0
.L252:
	.word	gStringVar4
	.word	sText_Dia22
.L181:
	ldr	r0, .L254
	ldr	r1, .L254+0x4
	bl	StringCopy
	b	.L157
.L255:
	.align	2, 0
.L254:
	.word	gStringVar4
	.word	sText_Dia23
.L182:
	ldr	r0, .L256
	ldr	r1, .L256+0x4
	bl	StringCopy
	b	.L157
.L257:
	.align	2, 0
.L256:
	.word	gStringVar4
	.word	sText_Dia24
.L183:
	ldr	r0, .L258
	ldr	r1, .L258+0x4
	bl	StringCopy
	b	.L157
.L259:
	.align	2, 0
.L258:
	.word	gStringVar4
	.word	sText_Dia25
.L184:
	ldr	r0, .L260
	ldr	r1, .L260+0x4
	bl	StringCopy
	b	.L157
.L261:
	.align	2, 0
.L260:
	.word	gStringVar4
	.word	sText_Dia26
.L185:
	ldr	r0, .L262
	ldr	r1, .L262+0x4
	bl	StringCopy
	b	.L157
.L263:
	.align	2, 0
.L262:
	.word	gStringVar4
	.word	sText_Dia27
.L186:
	ldr	r0, .L264
	ldr	r1, .L264+0x4
	bl	StringCopy
	b	.L157
.L265:
	.align	2, 0
.L264:
	.word	gStringVar4
	.word	sText_Dia28
.L187:
	ldr	r0, .L266
	ldr	r1, .L266+0x4
	bl	StringCopy
	b	.L157
.L267:
	.align	2, 0
.L266:
	.word	gStringVar4
	.word	sText_Dia29
.L188:
	ldr	r0, .L268
	ldr	r1, .L268+0x4
	bl	StringCopy
	b	.L157
.L269:
	.align	2, 0
.L268:
	.word	gStringVar4
	.word	sText_Dia30
.L189:
	ldr	r0, .L270
	ldr	r1, .L270+0x4
	bl	StringCopy
	b	.L157
.L271:
	.align	2, 0
.L270:
	.word	gStringVar4
	.word	sText_Dia31
.L190:
	ldr	r0, .L272
	ldr	r1, .L272+0x4
	bl	StringCopy
	b	.L157
.L273:
	.align	2, 0
.L272:
	.word	gStringVar4
	.word	sText_Dia32
.L191:
	ldr	r0, .L274
	ldr	r1, .L274+0x4
	bl	StringCopy
	b	.L157
.L275:
	.align	2, 0
.L274:
	.word	gStringVar4
	.word	sText_Dia33
.L192:
	ldr	r0, .L276
	ldr	r1, .L276+0x4
	bl	StringCopy
	b	.L157
.L277:
	.align	2, 0
.L276:
	.word	gStringVar4
	.word	sText_Dia34
.L193:
	ldr	r0, .L278
	ldr	r1, .L278+0x4
	bl	StringCopy
	b	.L157
.L279:
	.align	2, 0
.L278:
	.word	gStringVar4
	.word	sText_Dia35
.L194:
	ldr	r0, .L280
	ldr	r1, .L280+0x4
	bl	StringCopy
	b	.L157
.L281:
	.align	2, 0
.L280:
	.word	gStringVar4
	.word	sText_Dia36
.L195:
	ldr	r0, .L282
	ldr	r1, .L282+0x4
	bl	StringCopy
	b	.L157
.L283:
	.align	2, 0
.L282:
	.word	gStringVar4
	.word	sText_Dia37
.L196:
	ldr	r0, .L284
	ldr	r1, .L284+0x4
	bl	StringCopy
	b	.L157
.L285:
	.align	2, 0
.L284:
	.word	gStringVar4
	.word	sText_Dia38
.L197:
	ldr	r0, .L286
	ldr	r1, .L286+0x4
	bl	StringCopy
	b	.L157
.L287:
	.align	2, 0
.L286:
	.word	gStringVar4
	.word	sText_Dia39
.L198:
	ldr	r0, .L288
	ldr	r1, .L288+0x4
	bl	StringCopy
	b	.L157
.L289:
	.align	2, 0
.L288:
	.word	gStringVar4
	.word	sText_Dia40
.L199:
	ldr	r0, .L290
	ldr	r1, .L290+0x4
	bl	StringCopy
.L157:
	pop	{r0}
	bx	r0
.L291:
	.align	2, 0
.L290:
	.word	gStringVar4
	.word	sText_Dia41
.Lfe16:
	.size	 BufferNPCMessage,.Lfe16-BufferNPCMessage
	.align	2, 0
	.type	 StatusInflictionScreenFlash,function
	.thumb_func
StatusInflictionScreenFlash:
	push	{lr}
	ldr	r0, .L293
	mov	r1, #0x2
	bl	CreateTask
	pop	{r0}
	bx	r0
.L294:
	.align	2, 0
.L293:
	.word	Task_DoStatusInflictionScreenFlash
.Lfe17:
	.size	 StatusInflictionScreenFlash,.Lfe17-StatusInflictionScreenFlash
	.align	2, 0
	.type	 HealMon,function
	.thumb_func
HealMon:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	add	r5, r0, #0
	mov	r4, #0x0
	mov	r1, #0x0
.L299:
	mov	r2, sp
	add	r0, r2, r4
	strb	r1, [r0]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3
	bls	.L299	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x3a
	bl	GetMonData
	lsl	r2, r0, #0x10
	mov	r1, sp
	strb	r0, [r1]
	mov	r0, sp
	lsr	r2, r2, #0x18
	strb	r2, [r0, #0x1]
	add	r0, r5, #0
	mov	r1, #0x39
	mov	r2, sp
	bl	SetMonData
	add	r0, r5, #0
	mov	r1, #0x15
	bl	GetMonData
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r4, #0x0
.L304:
	add	r1, r4, #0
	add	r1, r1, #0xd
	add	r0, r5, #0
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r6, #0
	add	r2, r4, #0
	bl	CalculatePPWithBonus
	mov	r1, sp
	strb	r0, [r1]
	add	r1, r4, #0
	add	r1, r1, #0x11
	add	r0, r5, #0
	mov	r2, sp
	bl	SetMonData
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3
	bls	.L304	@cond_branch
	mov	r0, sp
	mov	r1, #0x0
	strb	r1, [r0]
	strb	r1, [r0, #0x1]
	strb	r1, [r0, #0x2]
	strb	r1, [r0, #0x3]
	add	r0, r5, #0
	mov	r1, #0x37
	mov	r2, sp
	bl	SetMonData
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe18:
	.size	 HealMon,.Lfe18-HealMon
	.align	2, 0
	.type	 DoesAbilityPreventStatus,function
	.thumb_func
DoesAbilityPreventStatus:
	push	{r4, lr}
	add	r4, r1, #0
	bl	GetMonAbility
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x0
	cmp	r4, #0x20
	beq	.L308	@cond_branch
	cmp	r4, #0x20
	bhi	.L321	@cond_branch
	cmp	r4, #0x7
	beq	.L314	@cond_branch
	cmp	r4, #0x10
	beq	.L310	@cond_branch
	b	.L307
.L321:
	cmp	r4, #0x40
	beq	.L312	@cond_branch
	cmp	r4, #0x80
	beq	.L317	@cond_branch
	b	.L307
.L308:
	cmp	r0, #0x28
	bne	.L307	@cond_branch
	b	.L322
.L310:
	cmp	r0, #0x29
	bne	.L307	@cond_branch
	b	.L322
.L312:
	cmp	r0, #0x7
	bne	.L307	@cond_branch
	b	.L322
.L314:
	cmp	r0, #0xf
	beq	.L322	@cond_branch
	cmp	r0, #0x48
	bne	.L307	@cond_branch
	b	.L322
.L317:
	cmp	r0, #0x11
	bne	.L307	@cond_branch
.L322:
	mov	r1, #0x1
.L307:
	add	r0, r1, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe19:
	.size	 DoesAbilityPreventStatus,.Lfe19-DoesAbilityPreventStatus
	.align	2, 0
	.type	 DoesTypePreventStatus,function
	.thumb_func
DoesTypePreventStatus:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	mov	r3, #0x0
	cmp	r1, #0x20
	beq	.L328	@cond_branch
	cmp	r1, #0x20
	bhi	.L340	@cond_branch
	cmp	r1, #0x7
	beq	.L324	@cond_branch
	cmp	r1, #0x10
	beq	.L334	@cond_branch
	b	.L324
.L340:
	cmp	r1, #0x40
	beq	.L331	@cond_branch
	cmp	r1, #0x80
	bne	.L324	@cond_branch
	ldr	r1, .L341
	lsl	r0, r2, #0x3
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r2, [r0, #0x6]
	cmp	r2, #0x8
	beq	.L336	@cond_branch
	cmp	r2, #0x3
	beq	.L336	@cond_branch
	ldrb	r0, [r0, #0x7]
	cmp	r0, #0x8
	beq	.L336	@cond_branch
	cmp	r0, #0x3
	bne	.L324	@cond_branch
	b	.L336
.L342:
	.align	2, 0
.L341:
	.word	gBaseStats
.L328:
	ldr	r0, .L343
	lsl	r1, r2, #0x3
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x6]
	cmp	r0, #0xf
	beq	.L336	@cond_branch
	ldrb	r0, [r1, #0x7]
	cmp	r0, #0xf
	bne	.L324	@cond_branch
	b	.L336
.L344:
	.align	2, 0
.L343:
	.word	gBaseStats
.L331:
	ldr	r1, .L345
	lsl	r0, r2, #0x3
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x6]
	cmp	r1, #0x4
	beq	.L336	@cond_branch
	ldrb	r0, [r0, #0x7]
	cmp	r0, #0x4
	beq	.L336	@cond_branch
	cmp	r1, #0xd
	beq	.L336	@cond_branch
	cmp	r0, #0xd
	bne	.L324	@cond_branch
	b	.L336
.L346:
	.align	2, 0
.L345:
	.word	gBaseStats
.L334:
	ldr	r0, .L347
	lsl	r1, r2, #0x3
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x6]
	cmp	r0, #0xa
	beq	.L336	@cond_branch
	ldrb	r0, [r1, #0x7]
	cmp	r0, #0xa
	bne	.L324	@cond_branch
.L336:
	mov	r3, #0x1
.L324:
	add	r0, r3, #0
	pop	{r1}
	bx	r1
.L348:
	.align	2, 0
.L347:
	.word	gBaseStats
.Lfe20:
	.size	 DoesTypePreventStatus,.Lfe20-DoesTypePreventStatus
	.align	2, 0
	.type	 TryInflictRandomStatus,function
	.thumb_func
TryInflictRandomStatus:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	mov	r6, #0x0
.L353:
	mov	r1, sp
	add	r0, r1, r6
	strb	r6, [r0]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x2
	bls	.L353	@cond_branch
	mov	r4, #0x0
	mov	r8, r4
.L358:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, sp
	add	r2, r1, r6
	ldrb	r3, [r2]
	add	r1, r1, r0
	ldrb	r0, [r1]
	strb	r0, [r2]
	strb	r3, [r1]
	mov	r0, r8
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	cmp	r0, #0x9
	bls	.L358	@cond_branch
	ldr	r0, .L411
	ldr	r0, [r0]
	ldr	r4, .L411+0x4
	add	r0, r0, r4
	ldrh	r0, [r0]
	mov	r1, #0x1
	mov	sl, r1
	cmp	r0, #0x4
	bls	.L361	@cond_branch
	mov	r4, #0x3
	mov	sl, r4
	cmp	r0, #0x9
	bhi	.L361	@cond_branch
	mov	r0, #0x2
	mov	sl, r0
.L361:
	mov	r1, #0x0
	str	r1, [sp, #0x4]
	ldr	r7, .L411+0x8
.L364:
	mov	r4, #0x0
	mov	r9, r4
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r0, #0
	cmp	r0, #0x22
	bhi	.L367	@cond_branch
	mov	r0, #0x80
	b	.L409
.L412:
	.align	2, 0
.L411:
	.word	gSaveBlock2Ptr
	.word	0xcb2
	.word	sStatusFlags
.L367:
	cmp	r0, #0x3b
	bhi	.L369	@cond_branch
	mov	r0, #0x20
	b	.L409
.L369:
	cmp	r0, #0x4f
	bhi	.L371	@cond_branch
	mov	r0, #0x40
	b	.L409
.L371:
	cmp	r1, #0x59
	bhi	.L373	@cond_branch
	mov	r0, #0x7
	b	.L409
.L407:
	mov	r0, #0x1
	mov	r9, r0
	b	.L377
.L373:
	mov	r0, #0x10
.L409:
	str	r0, [r7]
	ldr	r0, .L413
	ldr	r0, [r0]
	ldr	r1, [sp, #0x4]
	cmp	r1, r0
	beq	.L366	@cond_branch
	str	r0, [sp, #0x4]
	mov	r4, #0x0
	mov	r8, r4
	mov	r6, #0x0
.L379:
	mov	r1, sp
	add	r0, r1, r6
	ldrb	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L413+0x4
	add	r5, r1, r0
	add	r0, r5, #0
	mov	r1, #0x37
	bl	GetMonData
	bl	GetAilmentFromStatus
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L380	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L380	@cond_branch
	mov	r0, r8
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	add	r0, r5, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r1, [r7]
	add	r0, r4, #0
	bl	DoesTypePreventStatus
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L407	@cond_branch
.L380:
	cmp	r8, sl
	beq	.L377	@cond_branch
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x2
	bls	.L379	@cond_branch
.L377:
	mov	r4, r8
	cmp	r4, #0
	beq	.L408	@cond_branch
.L366:
	mov	r0, r9
	cmp	r0, #0
	beq	.L364	@cond_branch
	ldr	r0, .L413
	ldr	r0, [r0]
	cmp	r0, #0x20
	beq	.L388	@cond_branch
	cmp	r0, #0x20
	bhi	.L395	@cond_branch
	cmp	r0, #0x7
	beq	.L395	@cond_branch
	cmp	r0, #0x10
	beq	.L389	@cond_branch
	b	.L395
.L414:
	.align	2, 0
.L413:
	.word	sStatusFlags
	.word	gPlayerParty
.L388:
	ldr	r1, .L415
	mov	r0, #0x1
	b	.L410
.L416:
	.align	2, 0
.L415:
	.word	sStatusMon
.L389:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	mov	r2, #0x1
	and	r1, r1, r2
	cmp	r1, #0
	beq	.L390	@cond_branch
	ldr	r0, .L417
	strb	r2, [r0]
	b	.L387
.L418:
	.align	2, 0
.L417:
	.word	sStatusMon
.L390:
	ldr	r0, .L419
	strb	r1, [r0]
	b	.L387
.L420:
	.align	2, 0
.L419:
	.word	sStatusMon
.L408:
	mov	r0, #0x0
	b	.L406
.L395:
	ldr	r1, .L421
	mov	r0, #0x0
.L410:
	strb	r0, [r1]
.L387:
	mov	r1, #0x0
	mov	r8, r1
	mov	r6, #0x0
.L401:
	mov	r4, sp
	add	r0, r4, r6
	ldrb	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L421+0x4
	add	r5, r1, r0
	add	r0, r5, #0
	mov	r1, #0x37
	bl	GetMonData
	bl	GetAilmentFromStatus
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L402	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L402	@cond_branch
	mov	r0, r8
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	add	r0, r5, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r7, .L421+0x8
	ldr	r1, [r7]
	add	r0, r5, #0
	bl	DoesAbilityPreventStatus
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L402	@cond_branch
	ldr	r1, [r7]
	add	r0, r4, #0
	bl	DoesTypePreventStatus
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L402	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x37
	add	r2, r7, #0
	bl	SetMonData
.L402:
	cmp	r8, sl
	beq	.L399	@cond_branch
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x2
	bls	.L401	@cond_branch
.L399:
	mov	r0, #0x1
.L406:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L422:
	.align	2, 0
.L421:
	.word	sStatusMon
	.word	gPlayerParty
	.word	sStatusFlags
.Lfe21:
	.size	 TryInflictRandomStatus,.Lfe21-TryInflictRandomStatus
	.align	2, 0
	.type	 AtLeastOneHealthyMon,function
	.thumb_func
AtLeastOneHealthyMon:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L438
	ldr	r0, [r0]
	ldr	r1, .L438+0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	mov	r7, #0x1
	cmp	r0, #0x4
	bls	.L425	@cond_branch
	mov	r7, #0x3
	cmp	r0, #0x9
	bhi	.L425	@cond_branch
	mov	r7, #0x2
.L425:
	mov	r6, #0x0
	mov	r5, #0x0
	b	.L428
.L439:
	.align	2, 0
.L438:
	.word	gSaveBlock2Ptr
	.word	0xcb2
.L430:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
.L428:
	cmp	r5, #0x2
	bhi	.L429	@cond_branch
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L440
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
	bl	GetAilmentFromStatus
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L432	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L432	@cond_branch
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L432:
	cmp	r6, r7
	bne	.L430	@cond_branch
.L429:
	cmp	r6, #0
	beq	.L435	@cond_branch
	mov	r0, #0x1
	b	.L437
.L441:
	.align	2, 0
.L440:
	.word	gPlayerParty
.L435:
	mov	r0, #0x0
.L437:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe22:
	.size	 AtLeastOneHealthyMon,.Lfe22-AtLeastOneHealthyMon
	.align	2, 0
	.type	 GetNextRoomType,function
	.thumb_func
GetNextRoomType:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x8
	ldr	r1, .L470
	ldr	r0, [r1]
	mov	r4, #0xe1
	lsl	r4, r4, #0x4
	add	r0, r0, r4
	ldrb	r2, [r0]
	mov	r3, #0x78
	and	r3, r3, r2
	add	r5, r1, #0
	cmp	r3, #0x40
	bne	.L443	@cond_branch
	lsl	r0, r2, #0x19
	lsr	r0, r0, #0x1c
	b	.L469
.L471:
	.align	2, 0
.L470:
	.word	gSaveBlock2Ptr
.L443:
	ldr	r0, .L472
	lsl	r1, r2, #0x1d
	ldrh	r0, [r0]
	lsr	r1, r1, #0x1d
	cmp	r0, r1
	bne	.L444	@cond_branch
	cmp	r3, #0x18
	bne	.L445	@cond_branch
	bl	TryInflictRandomStatus
.L445:
	ldr	r0, [r5]
	add	r0, r0, r4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x19
	lsr	r0, r0, #0x1c
	b	.L469
.L473:
	.align	2, 0
.L472:
	.word	gSpecialVar_0x8007
.L444:
	mov	r2, #0x0
	ldr	r3, .L474
	mov	r1, #0x0
.L449:
	mov	r4, sp
	add	r0, r4, r2
	strb	r1, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x7
	bls	.L449	@cond_branch
	mov	r4, #0x8
	ldr	r0, [r5]
	mov	r6, #0xe1
	lsl	r6, r6, #0x4
	add	r0, r0, r6
	ldrb	r0, [r0]
	lsl	r0, r0, #0x19
	lsr	r0, r0, #0x1c
	add	r0, r0, r3
	ldrb	r1, [r0]
	mov	r2, #0x0
	add	r5, r3, #0
	mov	r3, #0x1
.L454:
	add	r0, r2, r5
	ldrb	r0, [r0]
	cmp	r0, r1
	bne	.L453	@cond_branch
	mov	r6, sp
	add	r0, r6, r2
	strb	r3, [r0]
	sub	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L453:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x7
	bls	.L454	@cond_branch
	mov	r0, sp
	ldrb	r0, [r0, #0x7]
	cmp	r0, #0x1
	beq	.L457	@cond_branch
	bl	AtLeastTwoAliveMons
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L457	@cond_branch
	mov	r1, sp
	mov	r0, #0x1
	strb	r0, [r1, #0x7]
	sub	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L457:
	mov	r0, sp
	ldrb	r0, [r0, #0x3]
	cmp	r0, #0x1
	beq	.L458	@cond_branch
	bl	AtLeastOneHealthyMon
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L458	@cond_branch
	mov	r1, sp
	mov	r0, #0x1
	strb	r0, [r1, #0x3]
	sub	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L458:
	ldr	r0, .L474+0x4
	ldr	r0, [r0]
	mov	r1, #0xe1
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L459	@cond_branch
	mov	r0, sp
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x1
	beq	.L460	@cond_branch
	mov	r1, sp
	mov	r0, #0x1
	strb	r0, [r1, #0x1]
	sub	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L460:
	mov	r0, sp
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0x1
	beq	.L459	@cond_branch
	mov	r1, sp
	mov	r0, #0x1
	strb	r0, [r1, #0x4]
	sub	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L459:
	add	r0, r4, #0
	bl	AllocZeroed
	add	r5, r0, #0
	mov	r3, #0x0
	mov	r2, #0x0
.L465:
	mov	r6, sp
	add	r0, r6, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L464	@cond_branch
	add	r1, r3, #0
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	add	r1, r5, r1
	strb	r2, [r1]
.L464:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x7
	bls	.L465	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r4, #0
	bl	__modsi3
	add	r0, r5, r0
	ldrb	r4, [r0]
	add	r0, r5, #0
	bl	Free
	cmp	r4, #0x3
	bne	.L468	@cond_branch
	bl	TryInflictRandomStatus
.L468:
	add	r0, r4, #0
.L469:
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L475:
	.align	2, 0
.L474:
	.word	sRoomTypeHints
	.word	gSaveBlock2Ptr
.Lfe23:
	.size	 GetNextRoomType,.Lfe23-GetNextRoomType
	.align	2, 0
	.type	 GetNPCRoomGraphicsId,function
	.thumb_func
GetNPCRoomGraphicsId:
	push	{r4, lr}
	ldr	r4, .L477
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x19
	bl	__umodsi3
	strb	r0, [r4]
	ldr	r1, .L477+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r0, [r0]
	pop	{r4}
	pop	{r1}
	bx	r1
.L478:
	.align	2, 0
.L477:
	.word	sNpcId
	.word	sNPCTable
.Lfe24:
	.size	 GetNPCRoomGraphicsId,.Lfe24-GetNPCRoomGraphicsId
	.align	2, 0
	.type	 GetInWildMonRoom,function
	.thumb_func
GetInWildMonRoom:
	ldr	r0, .L480
	ldrb	r0, [r0]
	bx	lr
.L481:
	.align	2, 0
.L480:
	.word	sInWildMonRoom
.Lfe25:
	.size	 GetInWildMonRoom,.Lfe25-GetInWildMonRoom
	.align	2, 0
	.globl	TryGenerateBattlePikeWildMon
	.type	 TryGenerateBattlePikeWildMon,function
	.thumb_func
TryGenerateBattlePikeWildMon:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	bl	GetBattlePikeWildMonHeaderId
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r7, .L498
	ldr	r0, [r7]
	ldr	r4, .L498+0x4
	add	r0, r0, r4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	ldr	r1, .L498+0x8
	lsr	r0, r0, #0x1c
	add	r0, r0, r1
	ldr	r0, [r0]
	str	r0, [sp, #0x4]
	ldr	r0, .L498+0xc
	mov	r1, #0xb
	mov	r2, #0x0
	bl	GetMonData
	add	r5, r0, #0
	lsl	r0, r5, #0x10
	lsr	r0, r0, #0x10
	bl	SpeciesToPikeMonId
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, [r7]
	add	r0, r0, r4
	ldrb	r1, [r0]
	mov	r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L483	@cond_branch
	bl	GetHighestLevelInPlayerParty
	add	r7, r0, #0
	cmp	r7, #0x3b
	ble	.L497	@cond_branch
	lsl	r0, r6, #0x2
	ldr	r1, [sp, #0x4]
	add	r0, r0, r1
	ldr	r1, [r0]
	lsl	r0, r5, #0x1
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x2]
	sub	r7, r7, r0
	cmp	r7, #0x3b
	bgt	.L487	@cond_branch
.L497:
	mov	r7, #0x3c
	b	.L487
.L499:
	.align	2, 0
.L498:
	.word	gSaveBlock2Ptr
	.word	0xca9
	.word	sWildMons
	.word	gEnemyParty
.L483:
	lsl	r0, r6, #0x2
	ldr	r2, [sp, #0x4]
	add	r0, r0, r2
	ldr	r1, [r0]
	lsl	r0, r5, #0x1
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x2]
	mov	r0, #0x32
	sub	r7, r0, r1
.L487:
	mov	r0, r8
	cmp	r0, #0x1
	bne	.L488	@cond_branch
	lsl	r0, r7, #0x18
	lsr	r0, r0, #0x18
	bl	CanEncounterWildMon
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L488	@cond_branch
	mov	r0, #0x0
	b	.L496
.L488:
	ldr	r0, .L500
	ldr	r1, .L500+0x4
	mov	r8, r1
	lsl	r6, r6, #0x2
	mov	r9, r6
	ldr	r2, [sp, #0x4]
	add	r2, r2, r9
	mov	sl, r2
	ldr	r1, [r2]
	lsl	r6, r5, #0x1
	add	r4, r6, r5
	lsl	r4, r4, #0x2
	add	r1, r4, r1
	ldrh	r2, [r1]
	lsl	r1, r2, #0x3
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r8
	ldrb	r2, [r1, #0x15]
	mov	r1, #0xca
	lsl	r1, r1, #0x1
	mul	r2, r2, r1
	lsl	r1, r7, #0x2
	ldr	r3, .L500+0x8
	add	r1, r1, r3
	add	r2, r2, r1
	mov	r1, #0x19
	bl	SetMonData
	mov	r1, sl
	ldr	r0, [r1]
	add	r4, r4, r0
	ldrh	r1, [r4]
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	ldrh	r0, [r0, #0x1a]
	mov	r7, r9
	cmp	r0, #0
	beq	.L489	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1
	and	r0, r0, r1
.L489:
	str	r0, [sp]
	ldr	r0, .L500
	mov	r1, #0x2e
	mov	r2, sp
	bl	SetMonData
	mov	r4, #0x0
	add	r0, r6, r5
	lsl	r6, r0, #0x2
.L494:
	ldr	r2, [sp, #0x4]
	add	r0, r7, r2
	ldr	r0, [r0]
	add	r0, r6, r0
	lsl	r1, r4, #0x1
	add	r0, r0, #0x4
	add	r0, r0, r1
	ldrh	r1, [r0]
	lsl	r2, r4, #0x18
	lsr	r2, r2, #0x18
	ldr	r0, .L500
	bl	SetMonMoveSlot
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L494	@cond_branch
	ldr	r0, .L500
	bl	CalculateMonStats
	mov	r0, #0x1
.L496:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L501:
	.align	2, 0
.L500:
	.word	gEnemyParty
	.word	gBaseStats
	.word	gExperienceTables
.Lfe26:
	.size	 TryGenerateBattlePikeWildMon,.Lfe26-TryGenerateBattlePikeWildMon
	.align	2, 0
	.globl	GetBattlePikeWildMonHeaderId
	.type	 GetBattlePikeWildMonHeaderId,function
	.thumb_func
GetBattlePikeWildMonHeaderId:
	push	{lr}
	ldr	r0, .L509
	ldr	r1, [r0]
	ldr	r2, .L509+0x4
	add	r0, r1, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1d
	ldr	r2, .L509+0x8
	add	r1, r1, r2
	add	r1, r1, r0
	ldrh	r1, [r1]
	add	r2, r1, #0
	mov	r0, #0x8c
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bhi	.L503	@cond_branch
	mov	r1, #0x0
	b	.L504
.L510:
	.align	2, 0
.L509:
	.word	gSaveBlock2Ptr
	.word	0xca9
	.word	0xe04
.L503:
	mov	r0, #0x8c
	lsl	r0, r0, #0x2
	cmp	r1, r0
	bhi	.L505	@cond_branch
	mov	r1, #0x1
	b	.L504
.L505:
	mov	r0, #0xd2
	lsl	r0, r0, #0x2
	mov	r1, #0x3
	cmp	r2, r0
	bhi	.L504	@cond_branch
	mov	r1, #0x2
.L504:
	add	r0, r1, #0
	pop	{r1}
	bx	r1
.Lfe27:
	.size	 GetBattlePikeWildMonHeaderId,.Lfe27-GetBattlePikeWildMonHeaderId
	.align	2, 0
	.type	 DoStatusInflictionScreenFlash,function
	.thumb_func
DoStatusInflictionScreenFlash:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L516
	ldr	r2, .L516+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
.L512:
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L512	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L517:
	.align	2, 0
.L516:
	.word	sStatusInflictionScreenFlashFuncs
	.word	gTasks
.Lfe28:
	.size	 DoStatusInflictionScreenFlash,.Lfe28-DoStatusInflictionScreenFlash
	.align	2, 0
	.type	 StatusInflictionFadeOut,function
	.thumb_func
StatusInflictionFadeOut:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x14]
	mov	r2, #0x14
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L520	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x14]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L519	@cond_branch
.L520:
	ldrh	r0, [r4, #0xa]
	strh	r0, [r4, #0x14]
	ldrh	r0, [r4, #0x10]
	ldrh	r1, [r4, #0x16]
	add	r0, r0, r1
	strh	r0, [r4, #0x16]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x10
	ble	.L521	@cond_branch
	mov	r0, #0x10
	strh	r0, [r4, #0x16]
.L521:
	mov	r0, #0x1
	neg	r0, r0
	ldrb	r1, [r4, #0x16]
	ldr	r2, .L523
	bl	BlendPalettes
.L519:
	mov	r2, #0x16
	ldrsh	r0, [r4, r2]
	cmp	r0, #0xf
	ble	.L522	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	ldrh	r0, [r4, #0xc]
	strh	r0, [r4, #0x14]
.L522:
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L524:
	.align	2, 0
.L523:
	.word	0x2d6b
.Lfe29:
	.size	 StatusInflictionFadeOut,.Lfe29-StatusInflictionFadeOut
	.align	2, 0
	.type	 StatusInflictionFadeIn,function
	.thumb_func
StatusInflictionFadeIn:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x14]
	mov	r2, #0x14
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L527	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x14]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L526	@cond_branch
.L527:
	ldrh	r0, [r4, #0xc]
	strh	r0, [r4, #0x14]
	ldrh	r0, [r4, #0x16]
	ldrh	r1, [r4, #0x12]
	sub	r0, r0, r1
	strh	r0, [r4, #0x16]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L528	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x16]
.L528:
	mov	r0, #0x1
	neg	r0, r0
	ldrb	r1, [r4, #0x16]
	ldr	r2, .L532
	bl	BlendPalettes
.L526:
	mov	r0, #0x16
	ldrsh	r1, [r4, r0]
	cmp	r1, #0
	bne	.L529	@cond_branch
	ldrh	r0, [r4, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L530	@cond_branch
	ldr	r0, .L532+0x4
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
	b	.L529
.L533:
	.align	2, 0
.L532:
	.word	0x2d6b
	.word	DoStatusInflictionScreenFlash
.L530:
	ldrh	r0, [r4, #0xa]
	strh	r0, [r4, #0x14]
	strh	r1, [r4, #0x8]
.L529:
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe30:
	.size	 StatusInflictionFadeIn,.Lfe30-StatusInflictionFadeIn
	.align	2, 0
	.type	 StartStatusInflictionScreenFlash,function
	.thumb_func
StartStatusInflictionScreenFlash:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #-0x4
	mov	r8, r0
	add	r4, r1, #0
	add	r5, r2, #0
	add	r6, r3, #0
	ldr	r3, [sp, #0x18]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	lsl	r6, r6, #0x10
	lsr	r6, r6, #0x10
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	ldr	r0, .L535
	mov	r1, #0x3
	str	r3, [sp]
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L535+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r0, r8
	strh	r0, [r1, #0xa]
	strh	r4, [r1, #0xc]
	strh	r5, [r1, #0xe]
	strh	r6, [r1, #0x10]
	ldr	r3, [sp]
	strh	r3, [r1, #0x12]
	strh	r0, [r1, #0x14]
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L536:
	.align	2, 0
.L535:
	.word	DoStatusInflictionScreenFlash
	.word	gTasks
.Lfe31:
	.size	 StartStatusInflictionScreenFlash,.Lfe31-StartStatusInflictionScreenFlash
	.align	2, 0
	.type	 IsStatusInflictionScreenFlashTaskFinished,function
	.thumb_func
IsStatusInflictionScreenFlashTaskFinished:
	push	{lr}
	ldr	r0, .L541
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	beq	.L538	@cond_branch
	mov	r0, #0x0
	b	.L540
.L542:
	.align	2, 0
.L541:
	.word	DoStatusInflictionScreenFlash
.L538:
	mov	r0, #0x1
.L540:
	pop	{r1}
	bx	r1
.Lfe32:
	.size	 IsStatusInflictionScreenFlashTaskFinished,.Lfe32-IsStatusInflictionScreenFlashTaskFinished
	.align	2, 0
	.type	 Task_DoStatusInflictionScreenFlash,function
	.thumb_func
Task_DoStatusInflictionScreenFlash:
	push	{r4, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r4, r0, #0
	ldr	r1, .L547
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	ldrh	r2, [r1, #0x8]
	mov	r3, #0x8
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	bne	.L544	@cond_branch
	add	r0, r2, #0x1
	strh	r0, [r1, #0x8]
	mov	r0, #0x2
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x3
	mov	r3, #0x2
	bl	StartStatusInflictionScreenFlash
	b	.L545
.L548:
	.align	2, 0
.L547:
	.word	gTasks
.L544:
	bl	IsStatusInflictionScreenFlashTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L545	@cond_branch
	bl	EnableBothScriptContexts
	add	r0, r4, #0
	bl	DestroyTask
.L545:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe33:
	.size	 Task_DoStatusInflictionScreenFlash,.Lfe33-Task_DoStatusInflictionScreenFlash
	.align	2, 0
	.type	 TryHealMons,function
	.thumb_func
TryHealMons:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x4]
	cmp	r0, #0
	bne	.LCB3477
	b	.L549	@long jump
.LCB3477:
	mov	r0, #0x0
	mov	r8, r0
.L554:
	mov	r0, sp
	add	r0, r0, r8
	mov	r1, r8
	strb	r1, [r0]
	mov	r0, r8
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	cmp	r0, #0x2
	bls	.L554	@cond_branch
	mov	r5, #0x0
.L559:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r2, sp
	add	r2, r2, r8
	ldrb	r3, [r2]
	mov	r0, sp
	add	r1, r0, r4
	ldrb	r0, [r1]
	strb	r0, [r2]
	strb	r3, [r1]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x9
	bls	.L559	@cond_branch
	mov	r1, #0x0
	mov	r8, r1
.L564:
	mov	r0, #0x0
	mov	sl, r0
	mov	r4, sp
	add	r4, r4, r8
	ldrb	r1, [r4]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L579
	add	r7, r1, r0
	add	r0, r7, #0
	mov	r1, #0x39
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r0, r7, #0
	mov	r1, #0x3a
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	str	r4, [sp, #0x8]
	cmp	r5, r6
	bcc	.L578	@cond_branch
	add	r0, r7, #0
	mov	r1, #0x37
	bl	GetMonData
	bl	GetAilmentFromStatus
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L567	@cond_branch
	mov	r0, #0x1
	mov	sl, r0
	b	.L566
.L580:
	.align	2, 0
.L579:
	.word	gPlayerParty
.L567:
	add	r0, r7, #0
	mov	r1, #0x15
	bl	GetMonData
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	mov	r4, #0x0
	b	.L569
.L571:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L569:
	cmp	r4, #0x3
	bhi	.L566	@cond_branch
	add	r1, r4, #0
	add	r1, r1, #0xd
	add	r0, r7, #0
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, r9
	add	r2, r4, #0
	bl	CalculatePPWithBonus
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r1, r4, #0
	add	r1, r1, #0x11
	add	r0, r7, #0
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, r6
	bcs	.L571	@cond_branch
.L578:
	mov	r1, #0x1
	mov	sl, r1
.L566:
	mov	r0, sl
	cmp	r0, #0x1
	bne	.L563	@cond_branch
	ldr	r0, [sp, #0x8]
	ldrb	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L581
	add	r0, r0, r1
	bl	HealMon
	ldr	r0, [sp, #0x4]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x4]
	cmp	r0, #0
	beq	.L549	@cond_branch
.L563:
	mov	r0, r8
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	cmp	r0, #0x2
	bls	.L564	@cond_branch
.L549:
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L582:
	.align	2, 0
.L581:
	.word	gPlayerParty
.Lfe34:
	.size	 TryHealMons,.Lfe34-TryHealMons
	.align	2, 0
	.type	 GetInBattlePike,function
	.thumb_func
GetInBattlePike:
	push	{r4, lr}
	ldr	r4, .L584
	bl	InBattlePike
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L585:
	.align	2, 0
.L584:
	.word	gSpecialVar_Result
.Lfe35:
	.size	 GetInBattlePike,.Lfe35-GetInBattlePike
	.align	2, 0
	.globl	InBattlePike
	.type	 InBattlePike,function
	.thumb_func
InBattlePike:
	push	{lr}
	mov	r2, #0x0
	ldr	r0, .L589
	ldrh	r1, [r0, #0x12]
	ldr	r3, .L589+0x4
	add	r0, r1, r3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bls	.L588	@cond_branch
	mov	r0, #0xb3
	lsl	r0, r0, #0x1
	cmp	r1, r0
	beq	.L588	@cond_branch
	add	r0, r0, #0x1
	cmp	r1, r0
	bne	.L587	@cond_branch
.L588:
	mov	r2, #0x1
.L587:
	add	r0, r2, #0
	pop	{r1}
	bx	r1
.L590:
	.align	2, 0
.L589:
	.word	gMapHeader
	.word	-0x15f
.Lfe36:
	.size	 InBattlePike,.Lfe36-InBattlePike
	.align	2, 0
	.type	 SetHintedRoom,function
	.thumb_func
SetHintedRoom:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r4, .L607
	mov	r0, #0x0
	strh	r0, [r4]
	mov	r0, #0x1
	bl	GetPikeQueenFightType
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L592	@cond_branch
	mov	r0, #0x1
	strh	r0, [r4]
	bl	Random
	ldr	r5, .L607+0x4
	ldr	r4, [r5]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x6
	bl	__umodsi3
	mov	r3, #0xe1
	lsl	r3, r3, #0x4
	add	r4, r4, r3
	mov	r1, #0x7
	and	r1, r1, r0
	ldrb	r2, [r4]
	mov	r0, #0x8
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r4]
	ldr	r2, [r5]
	add	r2, r2, r3
	ldrb	r1, [r2]
	mov	r0, #0x79
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x40
	b	.L606
.L608:
	.align	2, 0
.L607:
	.word	gSpecialVar_Result
	.word	gSaveBlock2Ptr
.L592:
	bl	Random
	ldr	r7, .L609
	ldr	r4, [r7]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	mov	r3, #0xe1
	lsl	r3, r3, #0x4
	add	r4, r4, r3
	mov	r1, #0x7
	and	r1, r1, r0
	ldrb	r2, [r4]
	mov	r0, #0x8
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r4]
	ldr	r0, [r7]
	add	r0, r0, r3
	ldrb	r1, [r0]
	mov	r0, #0x80
	and	r0, r0, r1
	mov	r6, #0x8
	cmp	r0, #0
	beq	.L594	@cond_branch
	mov	r6, #0x6
.L594:
	add	r0, r6, #0
	bl	AllocZeroed
	add	r5, r0, #0
	mov	r2, #0x0
	mov	r3, #0x0
	cmp	r2, r6
	bcs	.L597	@cond_branch
	add	r4, r7, #0
.L599:
	ldr	r0, [r4]
	mov	r1, #0xe1
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L600	@cond_branch
	cmp	r2, #0x1
	beq	.L598	@cond_branch
	cmp	r2, #0x4
	beq	.L598	@cond_branch
	add	r1, r3, #0
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	add	r1, r5, r1
	strb	r2, [r1]
	b	.L598
.L610:
	.align	2, 0
.L609:
	.word	gSaveBlock2Ptr
.L600:
	add	r0, r5, r2
	strb	r2, [r0]
.L598:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, r6
	bcc	.L599	@cond_branch
.L597:
	bl	Random
	ldr	r7, .L611
	ldr	r4, [r7]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r6, #0
	bl	__modsi3
	add	r0, r5, r0
	ldrb	r0, [r0]
	mov	r6, #0xe1
	lsl	r6, r6, #0x4
	add	r4, r4, r6
	mov	r1, #0xf
	and	r1, r1, r0
	lsl	r1, r1, #0x3
	ldrb	r2, [r4]
	mov	r0, #0x79
	neg	r0, r0
	mov	r8, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r4]
	add	r0, r5, #0
	bl	Free
	ldr	r0, [r7]
	add	r0, r0, r6
	ldrb	r1, [r0]
	mov	r0, #0x78
	and	r0, r0, r1
	cmp	r0, #0x18
	bne	.L604	@cond_branch
	bl	AtLeastOneHealthyMon
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L604	@cond_branch
	ldr	r2, [r7]
	add	r2, r2, r6
	ldrb	r1, [r2]
	mov	r0, r8
	and	r0, r0, r1
	mov	r1, #0x10
	orr	r0, r0, r1
	strb	r0, [r2]
.L604:
	ldr	r5, .L611
	ldr	r0, [r5]
	mov	r4, #0xe1
	lsl	r4, r4, #0x4
	add	r0, r0, r4
	ldrb	r1, [r0]
	mov	r0, #0x78
	and	r0, r0, r1
	cmp	r0, #0x38
	bne	.L593	@cond_branch
	bl	AtLeastTwoAliveMons
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L593	@cond_branch
	ldr	r2, [r5]
	add	r2, r2, r4
	ldrb	r1, [r2]
	mov	r0, #0x79
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x10
.L606:
	orr	r0, r0, r1
	strb	r0, [r2]
.L593:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L612:
	.align	2, 0
.L611:
	.word	gSaveBlock2Ptr
.Lfe37:
	.size	 SetHintedRoom,.Lfe37-SetHintedRoom
	.align	2, 0
	.type	 GetHintedRoomIndex,function
	.thumb_func
GetHintedRoomIndex:
	ldr	r1, .L614
	ldr	r0, .L614+0x4
	ldr	r0, [r0]
	mov	r2, #0xe1
	lsl	r2, r2, #0x4
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	lsr	r0, r0, #0x1d
	strh	r0, [r1]
	bx	lr
.L615:
	.align	2, 0
.L614:
	.word	gSpecialVar_Result
	.word	gSaveBlock2Ptr
.Lfe38:
	.size	 GetHintedRoomIndex,.Lfe38-GetHintedRoomIndex
	.align	2, 0
	.type	 GetRoomTypeHint,function
	.thumb_func
GetRoomTypeHint:
	ldr	r2, .L617
	ldr	r1, .L617+0x4
	ldr	r0, .L617+0x8
	ldr	r0, [r0]
	mov	r3, #0xe1
	lsl	r3, r3, #0x4
	add	r0, r0, r3
	ldrb	r0, [r0]
	lsl	r0, r0, #0x19
	lsr	r0, r0, #0x1c
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r2]
	bx	lr
.L618:
	.align	2, 0
.L617:
	.word	gSpecialVar_Result
	.word	sRoomTypeHints
	.word	gSaveBlock2Ptr
.Lfe39:
	.size	 GetRoomTypeHint,.Lfe39-GetRoomTypeHint
	.align	2, 0
	.type	 PrepareOneTrainer,function
	.thumb_func
PrepareOneTrainer:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	mov	r7, #0x6
	cmp	r0, #0
	bne	.L620	@cond_branch
	mov	r7, #0x1
.L620:
	ldr	r4, .L635
	ldr	r1, [r4]
	ldr	r2, .L635+0x4
	add	r0, r1, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1d
	ldr	r2, .L635+0x8
	add	r1, r1, r2
	add	r1, r1, r0
	ldrh	r0, [r1]
	mov	r1, #0xe
	bl	__udivsi3
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	add	r5, r4, #0
.L622:
	lsl	r0, r6, #0x18
	lsr	r0, r0, #0x18
	add	r1, r7, #0
	bl	GetRandomScaledFrontierTrainerId
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r3, #0x0
	ldr	r1, [r5]
	ldr	r2, .L635+0xc
	add	r0, r1, r2
	ldrh	r0, [r0]
	sub	r2, r0, #0x1
	cmp	r3, r2
	bge	.L624	@cond_branch
	ldr	r0, .L635+0x10
	add	r1, r1, r0
	b	.L634
.L636:
	.align	2, 0
.L635:
	.word	gSaveBlock2Ptr
	.word	0xca9
	.word	0xe04
	.word	0xcb2
	.word	0xcb4
.L627:
	add	r1, r1, #0x2
	add	r3, r3, #0x1
	cmp	r3, r2
	bge	.L624	@cond_branch
.L634:
	ldrh	r0, [r1]
	cmp	r0, r4
	bne	.L627	@cond_branch
.L624:
	ldr	r0, [r5]
	ldr	r1, .L637
	add	r0, r0, r1
	ldrh	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r3, r0
	bne	.L622	@cond_branch
	ldr	r5, .L637+0x4
	strh	r4, [r5]
	ldr	r1, .L637+0x8
	ldr	r0, .L637+0xc
	str	r0, [r1]
	ldrh	r0, [r5]
	mov	r1, #0x0
	bl	SetBattleFacilityTrainerGfxId
	ldr	r0, .L637+0x10
	ldr	r1, [r0]
	ldr	r0, .L637
	add	r2, r1, r0
	ldrh	r0, [r2]
	cmp	r0, #0xd
	bhi	.L633	@cond_branch
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x1
	ldr	r2, .L637+0x14
	add	r1, r1, r2
	add	r1, r1, r0
	ldrh	r0, [r5]
	strh	r0, [r1]
.L633:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L638:
	.align	2, 0
.L637:
	.word	0xcb2
	.word	gTrainerBattleOpponent_A
	.word	gFacilityTrainers
	.word	gBattleFrontierTrainers
	.word	gSaveBlock2Ptr
	.word	0xcb4
.Lfe40:
	.size	 PrepareOneTrainer,.Lfe40-PrepareOneTrainer
	.align	2, 0
	.type	 PrepareTwoTrainers,function
	.thumb_func
PrepareTwoTrainers:
	push	{r4, r5, r6, r7, lr}
	ldr	r4, .L665
	ldr	r1, [r4]
	ldr	r2, .L665+0x4
	add	r0, r1, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1d
	ldr	r2, .L665+0x8
	add	r1, r1, r2
	add	r1, r1, r0
	ldrh	r0, [r1]
	mov	r1, #0xe
	bl	__udivsi3
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r1, .L665+0xc
	ldr	r0, .L665+0x10
	str	r0, [r1]
	lsl	r7, r5, #0x18
	add	r6, r4, #0
.L640:
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x1
	bl	GetRandomScaledFrontierTrainerId
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r3, #0x0
	ldr	r1, [r6]
	ldr	r2, .L665+0x14
	add	r0, r1, r2
	ldrh	r0, [r0]
	sub	r2, r0, #0x1
	cmp	r3, r2
	bge	.L642	@cond_branch
	ldr	r0, .L665+0x18
	add	r1, r1, r0
	b	.L664
.L666:
	.align	2, 0
.L665:
	.word	gSaveBlock2Ptr
	.word	0xca9
	.word	0xe04
	.word	gFacilityTrainers
	.word	gBattleFrontierTrainers
	.word	0xcb2
	.word	0xcb4
.L645:
	add	r1, r1, #0x2
	add	r3, r3, #0x1
	cmp	r3, r2
	bge	.L642	@cond_branch
.L664:
	ldrh	r0, [r1]
	cmp	r0, r4
	bne	.L645	@cond_branch
.L642:
	ldr	r0, [r6]
	ldr	r1, .L667
	add	r0, r0, r1
	ldrh	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r3, r0
	bne	.L640	@cond_branch
	ldr	r5, .L667+0x4
	strh	r4, [r5]
	ldrh	r0, [r5]
	mov	r1, #0x0
	bl	SetBattleFacilityTrainerGfxId
	ldr	r3, .L667+0x8
	ldr	r1, [r3]
	ldr	r0, .L667
	add	r2, r1, r0
	ldrh	r0, [r2]
	cmp	r0, #0xe
	bhi	.L651	@cond_branch
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x1
	ldr	r2, .L667+0xc
	add	r1, r1, r2
	add	r1, r1, r0
	ldrh	r0, [r5]
	strh	r0, [r1]
.L651:
	add	r5, r3, #0
.L652:
	lsr	r0, r7, #0x18
	mov	r1, #0x1
	bl	GetRandomScaledFrontierTrainerId
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r3, #0x0
	ldr	r1, [r5]
	ldr	r2, .L667
	add	r0, r1, r2
	ldrh	r0, [r0]
	cmp	r3, r0
	bge	.L654	@cond_branch
	add	r2, r2, #0x2
	add	r0, r1, r2
	ldrh	r0, [r0]
	cmp	r0, r4
	beq	.L654	@cond_branch
	ldr	r0, .L667+0x8
	ldr	r1, [r0]
	sub	r2, r2, #0x2
	add	r0, r1, r2
	ldrh	r2, [r0]
	ldr	r0, .L667+0xc
	add	r1, r1, r0
.L657:
	add	r1, r1, #0x2
	add	r3, r3, #0x1
	cmp	r3, r2
	bge	.L654	@cond_branch
	ldrh	r0, [r1]
	cmp	r0, r4
	bne	.L657	@cond_branch
.L654:
	ldr	r0, [r5]
	ldr	r1, .L667
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r3, r0
	bne	.L652	@cond_branch
	ldr	r5, .L667+0x10
	strh	r4, [r5]
	ldrh	r0, [r5]
	mov	r1, #0x1
	bl	SetBattleFacilityTrainerGfxId
	ldr	r0, .L667+0x8
	ldr	r1, [r0]
	ldr	r0, .L667
	add	r2, r1, r0
	ldrh	r0, [r2]
	cmp	r0, #0xd
	bhi	.L663	@cond_branch
	sub	r0, r0, #0x2
	lsl	r0, r0, #0x1
	ldr	r2, .L667+0xc
	add	r1, r1, r2
	add	r1, r1, r0
	ldrh	r0, [r5]
	strh	r0, [r1]
.L663:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L668:
	.align	2, 0
.L667:
	.word	0xcb2
	.word	gTrainerBattleOpponent_A
	.word	gSaveBlock2Ptr
	.word	0xcb4
	.word	gTrainerBattleOpponent_B
.Lfe41:
	.size	 PrepareTwoTrainers,.Lfe41-PrepareTwoTrainers
	.align	2, 0
	.type	 ClearPikeTrainerIds,function
	.thumb_func
ClearPikeTrainerIds:
	push	{r4, r5, lr}
	mov	r2, #0x0
	ldr	r5, .L675
	ldr	r4, .L675+0x4
	ldr	r0, .L675+0x8
	add	r3, r0, #0
.L673:
	ldr	r1, [r5]
	lsl	r0, r2, #0x1
	add	r1, r1, r4
	add	r1, r1, r0
	ldrh	r0, [r1]
	orr	r0, r0, r3
	strh	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0xd
	bls	.L673	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L676:
	.align	2, 0
.L675:
	.word	gSaveBlock2Ptr
	.word	0xcb4
	.word	0xffff
.Lfe42:
	.size	 ClearPikeTrainerIds,.Lfe42-ClearPikeTrainerIds
	.align	2, 0
	.type	 BufferTrainerIntro,function
	.thumb_func
BufferTrainerIntro:
	push	{lr}
	ldr	r0, .L683
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L678	@cond_branch
	ldr	r3, .L683+0x4
	ldrh	r1, [r3]
	ldr	r0, .L683+0x8
	cmp	r1, r0
	bhi	.L680	@cond_branch
	ldr	r2, .L683+0xc
	mov	r0, #0x34
	mul	r1, r1, r0
	ldr	r0, [r2]
	add	r0, r0, r1
	add	r0, r0, #0xc
	bl	FrontierSpeechToString
	b	.L680
.L684:
	.align	2, 0
.L683:
	.word	gSpecialVar_0x8005
	.word	gTrainerBattleOpponent_A
	.word	0x12b
	.word	gFacilityTrainers
.L678:
	cmp	r0, #0x1
	bne	.L680	@cond_branch
	ldr	r3, .L685
	ldrh	r1, [r3]
	ldr	r0, .L685+0x4
	cmp	r1, r0
	bhi	.L680	@cond_branch
	ldr	r2, .L685+0x8
	mov	r0, #0x34
	mul	r1, r1, r0
	ldr	r0, [r2]
	add	r0, r0, r1
	add	r0, r0, #0xc
	bl	FrontierSpeechToString
.L680:
	pop	{r0}
	bx	r0
.L686:
	.align	2, 0
.L685:
	.word	gTrainerBattleOpponent_B
	.word	0x12b
	.word	gFacilityTrainers
.Lfe43:
	.size	 BufferTrainerIntro,.Lfe43-BufferTrainerIntro
	.align	2, 0
	.type	 AtLeastTwoAliveMons,function
	.thumb_func
AtLeastTwoAliveMons:
	push	{r4, r5, r6, lr}
	ldr	r5, .L697
	mov	r6, #0x0
	mov	r4, #0x0
.L691:
	add	r0, r5, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	bne	.L690	@cond_branch
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L690:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r5, r5, #0x64
	cmp	r4, #0x2
	bls	.L691	@cond_branch
	cmp	r6, #0x1
	bhi	.L694	@cond_branch
	mov	r0, #0x1
	b	.L696
.L698:
	.align	2, 0
.L697:
	.word	gPlayerParty
.L694:
	mov	r0, #0x0
.L696:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe44:
	.size	 AtLeastTwoAliveMons,.Lfe44-AtLeastTwoAliveMons
	.align	2, 0
	.type	 GetPikeQueenFightType,function
	.thumb_func
GetPikeQueenFightType:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	mov	r6, #0x0
	ldr	r1, .L711
	ldr	r2, [r1]
	ldr	r3, .L711+0x4
	add	r1, r2, r3
	ldrb	r1, [r1]
	lsl	r1, r1, #0x1e
	lsr	r1, r1, #0x1d
	ldr	r3, .L711+0x8
	add	r2, r2, r3
	add	r2, r2, r1
	lsr	r4, r0, #0x18
	ldrh	r2, [r2]
	add	r0, r4, r2
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r0, #0x5
	bl	GetPlayerSymbolCountForFacility
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	blt	.L705	@cond_branch
	cmp	r2, #0x1
	bgt	.L705	@cond_branch
	ldr	r1, .L711+0xc
	add	r0, r2, #0
	add	r0, r0, #0x14
	add	r0, r0, r1
	ldrb	r0, [r0]
	ldrb	r1, [r1, #0x17]
	sub	r0, r0, r1
	cmp	r4, r0
	bne	.L700	@cond_branch
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	b	.L700
.L712:
	.align	2, 0
.L711:
	.word	gSaveBlock2Ptr
	.word	0xca9
	.word	0xe04
	.word	sFrontierBrainStreakAppearances
.L705:
	ldr	r5, .L713
	mov	r0, #0x5
	lsl	r3, r0, #0x2
	add	r0, r3, r5
	ldrb	r1, [r0]
	add	r0, r5, #0x3
	add	r0, r3, r0
	ldrb	r2, [r0]
	sub	r1, r1, r2
	cmp	r4, r1
	bne	.L706	@cond_branch
	mov	r6, #0x3
	b	.L700
.L714:
	.align	2, 0
.L713:
	.word	sFrontierBrainStreakAppearances
.L706:
	add	r0, r5, #0x1
	add	r0, r3, r0
	ldrb	r1, [r0]
	sub	r0, r1, r2
	cmp	r4, r0
	beq	.L709	@cond_branch
	cmp	r4, r1
	bls	.L700	@cond_branch
	sub	r0, r4, r1
	add	r0, r0, r2
	add	r1, r5, #0x2
	add	r1, r3, r1
	ldrb	r1, [r1]
	bl	__modsi3
	cmp	r0, #0
	bne	.L700	@cond_branch
.L709:
	mov	r6, #0x4
.L700:
	add	r0, r6, #0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe45:
	.size	 GetPikeQueenFightType,.Lfe45-GetPikeQueenFightType
	.align	2, 0
	.type	 GetCurrentRoomPikeQueenFightType,function
	.thumb_func
GetCurrentRoomPikeQueenFightType:
	push	{r4, lr}
	ldr	r4, .L716
	mov	r0, #0x0
	bl	GetPikeQueenFightType
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L717:
	.align	2, 0
.L716:
	.word	gSpecialVar_Result
.Lfe46:
	.size	 GetCurrentRoomPikeQueenFightType,.Lfe46-GetCurrentRoomPikeQueenFightType
	.align	2, 0
	.type	 HealSomeMonsBeforePikeQueen,function
	.thumb_func
HealSomeMonsBeforePikeQueen:
	push	{r4, lr}
	ldr	r3, .L719
	ldr	r2, .L719+0x4
	ldr	r0, .L719+0x8
	ldr	r0, [r0]
	mov	r1, #0xe1
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r1, r1, #0x1d
	lsr	r1, r1, #0x1d
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	ldrh	r2, [r2]
	add	r0, r0, r2
	add	r0, r0, r3
	ldrb	r4, [r0]
	add	r0, r4, #0
	bl	TryHealMons
	ldr	r0, .L719+0xc
	strh	r4, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L720:
	.align	2, 0
.L719:
	.word	sNumMonsToHealBeforePikeQueen
	.word	gSpecialVar_0x8007
	.word	gSaveBlock2Ptr
	.word	gSpecialVar_Result
.Lfe47:
	.size	 HealSomeMonsBeforePikeQueen,.Lfe47-HealSomeMonsBeforePikeQueen
	.align	2, 0
	.type	 SetHealingroomTypesDisabled,function
	.thumb_func
SetHealingroomTypesDisabled:
	ldr	r0, .L722
	ldr	r2, [r0]
	ldr	r0, .L722+0x4
	ldrb	r1, [r0]
	mov	r0, #0xe1
	lsl	r0, r0, #0x4
	add	r2, r2, r0
	lsl	r1, r1, #0x7
	ldrb	r3, [r2]
	mov	r0, #0x7f
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
	bx	lr
.L723:
	.align	2, 0
.L722:
	.word	gSaveBlock2Ptr
	.word	gSpecialVar_0x8005
.Lfe48:
	.size	 SetHealingroomTypesDisabled,.Lfe48-SetHealingroomTypesDisabled
	.align	2, 0
	.type	 IsPartyFullHealed,function
	.thumb_func
IsPartyFullHealed:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r1, .L739
	mov	r0, #0x1
	strh	r0, [r1]
	mov	r0, #0x0
	mov	sl, r0
.L728:
	mov	r0, #0x0
	mov	r9, r0
	mov	r0, #0x64
	mov	r1, sl
	mul	r1, r1, r0
	ldr	r0, .L739+0x4
	add	r7, r1, r0
	add	r0, r7, #0
	mov	r1, #0x39
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	add	r0, r7, #0
	mov	r1, #0x3a
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r4, r5
	bcc	.L729	@cond_branch
	add	r0, r7, #0
	mov	r1, #0x37
	bl	GetMonData
	bl	GetAilmentFromStatus
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L729	@cond_branch
	add	r0, r7, #0
	mov	r1, #0x15
	bl	GetMonData
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r6, #0x0
	b	.L730
.L740:
	.align	2, 0
.L739:
	.word	gSpecialVar_Result
	.word	gPlayerParty
.L732:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L730:
	cmp	r6, #0x3
	bhi	.L736	@cond_branch
	add	r1, r6, #0
	add	r1, r1, #0xd
	add	r0, r7, #0
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, r8
	add	r2, r6, #0
	bl	CalculatePPWithBonus
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r1, r6, #0
	add	r1, r1, #0x11
	add	r0, r7, #0
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, r5
	bcs	.L732	@cond_branch
.L729:
	mov	r0, #0x1
	mov	r9, r0
.L736:
	mov	r0, r9
	cmp	r0, #0x1
	bne	.L727	@cond_branch
	ldr	r1, .L741
	mov	r0, #0x0
	strh	r0, [r1]
	b	.L726
.L742:
	.align	2, 0
.L741:
	.word	gSpecialVar_Result
.L727:
	mov	r0, sl
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	cmp	r0, #0x2
	bls	.L728	@cond_branch
.L726:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe49:
	.size	 IsPartyFullHealed,.Lfe49-IsPartyFullHealed
	.align	2, 0
	.type	 SaveMonHeldItems,function
	.thumb_func
SaveMonHeldItems:
	push	{r4, r5, r6, r7, lr}
	mov	r5, #0x0
	ldr	r7, .L749
	ldr	r6, .L749+0x4
.L747:
	ldr	r0, [r6]
	lsl	r4, r5, #0x1
	ldr	r1, .L749+0x8
	add	r0, r0, r1
	add	r0, r0, r4
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	mov	r2, #0xea
	lsl	r2, r2, #0x1
	add	r1, r1, r2
	ldr	r0, [r7]
	add	r0, r0, r1
	mov	r1, #0xc
	bl	GetMonData
	ldr	r1, [r6]
	ldr	r2, .L749+0xc
	add	r1, r1, r2
	add	r1, r1, r4
	strh	r0, [r1]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x2
	bls	.L747	@cond_branch
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L750:
	.align	2, 0
.L749:
	.word	gSaveBlock1Ptr
	.word	gSaveBlock2Ptr
	.word	0xcaa
	.word	0xe12
.Lfe50:
	.size	 SaveMonHeldItems,.Lfe50-SaveMonHeldItems
	.align	2, 0
	.type	 RestoreMonHeldItems,function
	.thumb_func
RestoreMonHeldItems:
	push	{r4, lr}
	mov	r4, #0x0
.L755:
	ldr	r0, .L757
	ldr	r2, [r0]
	lsl	r3, r4, #0x1
	ldr	r1, .L757+0x4
	add	r0, r2, r1
	add	r0, r0, r3
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L757+0x8
	add	r0, r0, r1
	ldr	r1, .L757+0xc
	add	r3, r3, r1
	add	r2, r2, r3
	mov	r1, #0xc
	bl	SetMonData
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x2
	bls	.L755	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.L758:
	.align	2, 0
.L757:
	.word	gSaveBlock2Ptr
	.word	0xcaa
	.word	gPlayerParty+-0x64
	.word	0xe12
.Lfe51:
	.size	 RestoreMonHeldItems,.Lfe51-RestoreMonHeldItems
	.align	2, 0
	.type	 InitPikeChallenge,function
	.thumb_func
InitPikeChallenge:
	push	{r4, r5, r6, lr}
	ldr	r3, .L761
	ldr	r1, [r3]
	ldr	r2, .L761+0x4
	add	r0, r1, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	lsr	r5, r0, #0x1e
	ldr	r0, .L761+0x8
	add	r1, r1, r0
	mov	r4, #0x0
	strb	r4, [r1]
	ldr	r1, [r3]
	ldr	r6, .L761+0xc
	add	r0, r1, r6
	strh	r4, [r0]
	add	r1, r1, r2
	ldrb	r2, [r1]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r3, [r3]
	ldr	r0, .L761+0x10
	add	r2, r3, r0
	ldr	r1, .L761+0x14
	lsl	r0, r5, #0x2
	add	r0, r0, r1
	ldr	r1, [r2]
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L760	@cond_branch
	lsl	r1, r5, #0x1
	ldr	r2, .L761+0x18
	add	r0, r3, r2
	add	r0, r0, r1
	strh	r4, [r0]
.L760:
	ldr	r0, .L761+0x1c
	strh	r4, [r0]
	ldr	r1, .L761+0x20
	mov	r0, #0x0
	strb	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L762:
	.align	2, 0
.L761:
	.word	gSaveBlock2Ptr
	.word	0xca9
	.word	0xca8
	.word	0xcb2
	.word	0xcdc
	.word	sWinStreakFlags
	.word	0xe04
	.word	gTrainerBattleOpponent_A
	.word	gBattleOutcome
.Lfe52:
	.size	 InitPikeChallenge,.Lfe52-InitPikeChallenge
	.align	2, 0
	.type	 CanEncounterWildMon,function
	.thumb_func
CanEncounterWildMon:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r4, .L769
	add	r0, r4, #0
	mov	r1, #0x6
	bl	GetMonData
	cmp	r0, #0
	bne	.L764	@cond_branch
	add	r0, r4, #0
	bl	GetMonAbility
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x33
	beq	.L766	@cond_branch
	cmp	r0, #0x16
	bne	.L764	@cond_branch
.L766:
	add	r0, r4, #0
	mov	r1, #0x38
	bl	GetMonData
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x5
	bls	.L764	@cond_branch
	sub	r0, r0, #0x5
	cmp	r5, r0
	bgt	.L764	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L764	@cond_branch
	mov	r0, #0x0
	b	.L768
.L770:
	.align	2, 0
.L769:
	.word	gPlayerParty
.L764:
	mov	r0, #0x1
.L768:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe53:
	.size	 CanEncounterWildMon,.Lfe53-CanEncounterWildMon
	.align	2, 0
	.type	 SpeciesToPikeMonId,function
	.thumb_func
SpeciesToPikeMonId:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	mov	r0, #0xa8
	lsl	r0, r0, #0x1
	cmp	r2, r0
	bne	.L772	@cond_branch
	mov	r1, #0x0
	b	.L773
.L772:
	mov	r0, #0xaf
	lsl	r0, r0, #0x1
	mov	r1, #0x2
	cmp	r2, r0
	bne	.L773	@cond_branch
	mov	r1, #0x1
.L773:
	add	r0, r1, #0
	pop	{r1}
	bx	r1
.Lfe54:
	.size	 SpeciesToPikeMonId,.Lfe54-SpeciesToPikeMonId

	.lcomm	sRoomType,1

	.lcomm	sStatusMon,1

	.lcomm	sInWildMonRoom,1

	.lcomm	sStatusFlags,4

	.lcomm	sNpcId,1
.text
	.align	2, 0

