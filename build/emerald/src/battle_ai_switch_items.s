@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	GetAIPartyIndexes
	.type	 GetAIPartyIndexes,function
	.thumb_func
GetAIPartyIndexes:
	push	{r4, r5, lr}
	add	r5, r0, #0
	add	r3, r1, #0
	add	r4, r2, #0
	ldr	r0, .L11
	ldr	r1, [r0]
	mov	r2, #0x80
	lsl	r2, r2, #0xf
	and	r1, r1, r2
	add	r2, r0, #0
	cmp	r1, #0
	beq	.L3	@cond_branch
	ldr	r0, .L11+0x4
	ldrh	r1, [r0]
	ldr	r0, .L11+0x8
	cmp	r1, r0
	bne	.L3	@cond_branch
	mov	r0, #0x1
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L3	@cond_branch
	mov	r0, #0x0
	str	r0, [r3]
	b	.L9
.L12:
	.align	2, 0
.L11:
	.word	gBattleTypeFlags
	.word	gTrainerBattleOpponent_B
	.word	0xffff
.L3:
	ldr	r1, [r2]
	ldr	r0, .L13
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L5	@cond_branch
	mov	r0, #0x2
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L6	@cond_branch
	str	r0, [r3]
	mov	r0, #0x3
	b	.L10
.L14:
	.align	2, 0
.L13:
	.word	0xc08000
.L6:
	mov	r0, #0x3
	str	r0, [r3]
	b	.L9
.L5:
	str	r1, [r3]
.L9:
	mov	r0, #0x6
.L10:
	str	r0, [r4]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe1:
	.size	 GetAIPartyIndexes,.Lfe1-GetAIPartyIndexes
	.align	2, 0
	.type	 HasBadOdds,function
	.thumb_func
HasBadOdds:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	ldr	r4, .L32
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	mov	r1, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L32+0x4
	mov	r1, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r3, r0, #0
	add	r3, r3, #0x22
	ldrb	r7, [r3]
	str	r7, [sp]
	add	r0, r0, #0x23
	ldrb	r6, [r0]
	mov	sl, r6
	ldrb	r0, [r4]
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r1, r0, #0
	add	r1, r1, #0x22
	ldrb	r5, [r1]
	mov	r9, r5
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	mov	r8, r0
	ldr	r0, .L32+0x8
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB129
	b	.L20	@long jump
.LCB129:
	add	r0, r7, #0
	add	r1, r5, #0
	bl	GetTypeModifier
	mov	r4, #0xf0
	lsl	r4, r4, #0x8
	and	r4, r4, r0
	cmp	r6, r7
	beq	.L17	@cond_branch
	add	r0, r6, #0
	add	r1, r5, #0
	bl	GetTypeModifier
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x1c
	mul	r4, r4, r0
.L17:
	cmp	r8, r9
	beq	.L18	@cond_branch
	ldr	r0, [sp]
	mov	r1, r8
	bl	GetTypeModifier
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x1c
	mul	r4, r4, r0
	ldr	r0, [sp]
	cmp	sl, r0
	beq	.L18	@cond_branch
	mov	r0, sl
	mov	r1, r8
	bl	GetTypeModifier
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x1c
	mul	r4, r4, r0
.L18:
	ldr	r0, .L32+0xc
	cmp	r4, r0
	bhi	.LCB183
	b	.L20	@long jump
.LCB183:
	bl	GetMostSuitableMonToSwitchInto
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x6
	bne	.LCB190
	b	.L20	@long jump
.LCB190:
	mov	r0, #0x0
	bl	HasSuperEffectiveMoveAgainstOpponents
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB197
	b	.L20	@long jump
.LCB197:
	ldr	r3, .L32+0x4
	ldr	r2, .L32
	ldrb	r1, [r2]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r3
	ldrh	r1, [r0, #0x2e]
	ldrh	r0, [r0, #0x2a]
	lsr	r1, r1, #0x1
	cmp	r0, r1
	bcc	.L20	@cond_branch
	mov	r4, #0x0
	add	r5, r3, #0
	add	r5, r5, #0xc
.L26:
	lsl	r1, r4, #0x1
	ldrb	r2, [r2]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, r0
	add	r1, r1, r5
	ldrh	r2, [r1]
	cmp	r2, #0x73
	beq	.L28	@cond_branch
	cmp	r2, #0x71
	beq	.L28	@cond_branch
	cmp	r2, #0xbf
	beq	.L28	@cond_branch
	mov	r0, #0xc3
	lsl	r0, r0, #0x1
	cmp	r2, r0
	beq	.L28	@cond_branch
	add	r0, r0, #0x38
	cmp	r2, r0
	beq	.L28	@cond_branch
	add	r0, r0, #0x76
	cmp	r2, r0
	beq	.L28	@cond_branch
	cmp	r2, #0x49
	beq	.L28	@cond_branch
	cmp	r2, #0x99
	beq	.L28	@cond_branch
	cmp	r2, #0x78
	beq	.L28	@cond_branch
	cmp	r2, #0x4f
	beq	.L28	@cond_branch
	ldr	r0, .L32+0x10
	cmp	r2, r0
	beq	.L28	@cond_branch
	cmp	r2, #0x8e
	beq	.L28	@cond_branch
	add	r0, r0, #0x27
	cmp	r2, r0
	beq	.L28	@cond_branch
	cmp	r2, #0x5f
	beq	.L28	@cond_branch
	cmp	r2, #0x5c
	beq	.L28	@cond_branch
	mov	r0, #0x9c
	lsl	r0, r0, #0x2
	cmp	r2, r0
	beq	.L28	@cond_branch
	ldr	r0, .L32+0x14
	cmp	r2, r0
	beq	.L28	@cond_branch
	add	r0, r0, #0xa
	cmp	r2, r0
	beq	.L28	@cond_branch
	add	r0, r0, #0xa2
	cmp	r2, r0
	beq	.L28	@cond_branch
	add	r0, r0, #0x27
	cmp	r2, r0
	beq	.L28	@cond_branch
	sub	r0, r0, #0x61
	cmp	r2, r0
	beq	.L28	@cond_branch
	cmp	r2, #0xfc
	beq	.L28	@cond_branch
	cmp	r2, #0x4e
	beq	.L28	@cond_branch
	cmp	r2, #0x56
	beq	.L28	@cond_branch
	add	r0, r0, #0xea
	cmp	r2, r0
	beq	.L28	@cond_branch
	cmp	r2, #0x89
	bne	.L25	@cond_branch
.L28:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x5
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x3
	bls	.L31	@cond_branch
.L25:
	add	r4, r4, #0x1
	ldr	r2, .L32
	cmp	r4, #0x3
	ble	.L26	@cond_branch
	ldrb	r0, [r2]
	ldr	r1, .L32+0x18
	ldr	r1, [r1]
	add	r0, r0, r1
	mov	r1, #0x9a
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	mov	r1, #0x6
	strb	r1, [r0]
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r2, #0x0
	bl	BtlController_EmitTwoReturnValues
	mov	r0, #0x1
	b	.L30
.L33:
	.align	2, 0
.L32:
	.word	gActiveBattler
	.word	gBattleMons
	.word	gBattleTypeFlags
	.word	0x1fff
	.word	0x119
	.word	0x105
	.word	gBattleStruct
.L31:
.L20:
	mov	r0, #0x0
.L30:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe2:
	.size	 HasBadOdds,.Lfe2-HasBadOdds
	.align	2, 0
	.type	 ShouldSwitchIfAllBadMoves,function
	.thumb_func
ShouldSwitchIfAllBadMoves:
	push	{lr}
	ldr	r0, .L38
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	mov	r2, #0xaa
	lsl	r2, r2, #0x1
	add	r1, r0, r2
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L35	@cond_branch
	mov	r0, #0x0
	b	.L37
.L39:
	.align	2, 0
.L38:
	.word	gBattleResources
.L35:
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r0, .L40
	ldrb	r0, [r0]
	ldr	r1, .L40+0x4
	ldr	r1, [r1]
	add	r0, r0, r1
	mov	r1, #0x9a
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	mov	r1, #0x6
	strb	r1, [r0]
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r2, #0x0
	bl	BtlController_EmitTwoReturnValues
	mov	r0, #0x1
.L37:
	pop	{r1}
	bx	r1
.L41:
	.align	2, 0
.L40:
	.word	gActiveBattler
	.word	gBattleStruct
.Lfe3:
	.size	 ShouldSwitchIfAllBadMoves,.Lfe3-ShouldSwitchIfAllBadMoves
	.align	2, 0
	.type	 ShouldSwitchIfPerishSong,function
	.thumb_func
ShouldSwitchIfPerishSong:
	push	{lr}
	ldr	r1, .L46
	ldr	r0, .L46+0x4
	ldrb	r2, [r0]
	lsl	r3, r2, #0x2
	add	r1, r3, r1
	ldr	r0, [r1]
	mov	r1, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L43	@cond_branch
	ldr	r0, .L46+0x8
	add	r1, r3, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1, #0x12]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bne	.L43	@cond_branch
	ldr	r0, .L46+0xc
	ldr	r0, [r0]
	add	r0, r2, r0
	mov	r1, #0x9a
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	mov	r1, #0x6
	strb	r1, [r0]
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r2, #0x0
	bl	BtlController_EmitTwoReturnValues
	mov	r0, #0x1
	b	.L45
.L47:
	.align	2, 0
.L46:
	.word	gStatuses3
	.word	gActiveBattler
	.word	gDisableStructs
	.word	gBattleStruct
.L43:
	mov	r0, #0x0
.L45:
	pop	{r1}
	bx	r1
.Lfe4:
	.size	 ShouldSwitchIfPerishSong,.Lfe4-ShouldSwitchIfPerishSong
	.align	2, 0
	.type	 ShouldSwitchIfWonderGuard,function
	.thumb_func
ShouldSwitchIfWonderGuard:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	ldr	r0, .L80
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB521
	b	.L61	@long jump
.LCB521:
	ldr	r0, .L80+0x4
	ldrb	r0, [r0]
	bl	GetBattlerPosition
	mov	r1, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x8]
	ldr	r4, .L80+0x8
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r4
	ldrh	r0, [r0, #0x20]
	cmp	r0, #0x19
	beq	.L50	@cond_branch
	b	.L61
.L81:
	.align	2, 0
.L80:
	.word	gBattleTypeFlags
	.word	gActiveBattler
	.word	gBattleMons
.L78:
	ldrb	r0, [r7]
	ldr	r1, .L82
	ldr	r1, [r1]
	add	r0, r0, r1
	mov	r1, #0x9a
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	strb	r5, [r0]
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r2, #0x0
	bl	BtlController_EmitTwoReturnValues
	mov	r0, #0x1
	b	.L76
.L83:
	.align	2, 0
.L82:
	.word	gBattleStruct
.L50:
	ldr	r0, [sp, #0x8]
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r5, #0x0
	add	r4, r4, #0xc
	mov	r8, r4
	ldr	r7, .L84
.L54:
	lsl	r0, r5, #0x1
	ldr	r4, .L84+0x4
	ldrb	r2, [r4]
	mov	r1, #0x5c
	mul	r1, r1, r2
	add	r0, r0, r1
	add	r0, r0, r8
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L53	@cond_branch
	add	r1, r2, #0
	add	r2, r6, #0
	bl	AI_GetTypeEffectiveness
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r7
	bhi	.L61	@cond_branch
.L53:
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L54	@cond_branch
	ldrb	r0, [r4]
	add	r2, sp, #0x4
	mov	r1, sp
	bl	GetAIPartyIndexes
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r1, .L84+0x8
	mov	sl, r1
	cmp	r0, #0
	bne	.L58	@cond_branch
	ldr	r0, .L84+0xc
	mov	sl, r0
.L58:
	ldr	r5, [sp]
	b	.L79
.L85:
	.align	2, 0
.L84:
	.word	0x1fff
	.word	gActiveBattler
	.word	gEnemyParty
	.word	gPlayerParty
.L63:
	mov	r0, #0x64
	mov	r7, r5
	mul	r7, r7, r0
	mov	r1, sl
	add	r4, r1, r7
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L62	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L62	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	ldr	r1, .L86
	cmp	r0, r1
	beq	.L62	@cond_branch
	ldr	r1, .L86+0x4
	ldr	r0, .L86+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r5, r0
	beq	.L62	@cond_branch
	ldr	r0, [sp, #0x8]
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r4, #0x0
	mov	r8, r7
	ldr	r0, .L86+0xc
	mov	r9, r0
.L71:
	add	r1, r4, #0
	add	r1, r1, #0xd
	mov	r0, sl
	add	r0, r0, r8
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0
	beq	.L70	@cond_branch
	ldr	r7, .L86+0x8
	ldrb	r1, [r7]
	add	r2, r6, #0
	bl	AI_GetTypeEffectiveness
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r9
	bls	.L70	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bhi	.LCB740
	b	.L78	@long jump
.LCB740:
.L70:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L71	@cond_branch
.L62:
	add	r5, r5, #0x1
.L79:
	ldr	r0, [sp, #0x4]
	cmp	r5, r0
	blt	.L63	@cond_branch
.L61:
	mov	r0, #0x0
.L76:
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L87:
	.align	2, 0
.L86:
	.word	0x432
	.word	gBattlerPartyIndexes
	.word	gActiveBattler
	.word	0x1fff
.Lfe5:
	.size	 ShouldSwitchIfWonderGuard,.Lfe5-ShouldSwitchIfWonderGuard
	.align	2, 0
	.type	 FindMonThatAbsorbsOpponentsMove,function
	.thumb_func
FindMonThatAbsorbsOpponentsMove:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	mov	r0, #0x1
	bl	HasSuperEffectiveMoveAgainstOpponents
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L89	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB802
	b	.L107	@long jump
.LCB802:
.L89:
	ldr	r1, .L123
	ldr	r5, .L123+0x4
	ldrb	r3, [r5]
	lsl	r0, r3, #0x1
	add	r4, r0, r1
	ldrh	r1, [r4]
	cmp	r1, #0
	bne	.LCB813
	b	.L107	@long jump
.LCB813:
	ldr	r0, .L123+0x8
	cmp	r1, r0
	bne	.LCB818
	b	.L107	@long jump
.LCB818:
	ldr	r2, .L123+0xc
	ldrh	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0
	bne	.LCB829
	b	.L107	@long jump
.LCB829:
	ldr	r0, .L123+0x10
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L93	@cond_branch
	mov	r8, r3
	mov	r0, r8
	bl	GetBattlerPosition
	mov	r4, #0x2
	eor	r0, r0, r4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	ldr	r1, .L123+0x14
	ldrb	r1, [r1]
	ldr	r2, .L123+0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L94	@cond_branch
	ldrb	r7, [r5]
	b	.L96
.L124:
	.align	2, 0
.L123:
	.word	gLastLandedMoves
	.word	gActiveBattler
	.word	0xffff
	.word	gBattleMoves
	.word	gBattleTypeFlags
	.word	gAbsentBattlerFlags
	.word	gBitTable
.L94:
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	eor	r0, r0, r4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	b	.L96
.L93:
	add	r7, r3, #0
	mov	r8, r7
.L96:
	ldr	r3, .L125
	ldr	r1, .L125+0x4
	ldr	r2, .L125+0x8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r0, [r0, #0x3]
	add	r4, r2, #0
	cmp	r0, #0xa
	bne	.L97	@cond_branch
	mov	r0, #0x12
	mov	sl, r0
	b	.L98
.L126:
	.align	2, 0
.L125:
	.word	gBattleMoves
	.word	gLastLandedMoves
	.word	gActiveBattler
.L97:
	cmp	r0, #0xb
	bne	.L99	@cond_branch
	mov	r1, #0xb
	mov	sl, r1
	b	.L98
.L99:
	cmp	r0, #0xd
	beq	.LCB932
	b	.L107	@long jump
.LCB932:
	mov	r2, #0xa
	mov	sl, r2
.L98:
	ldr	r1, .L127
	ldrb	r3, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x20]
	cmp	r0, sl
	bne	.L103	@cond_branch
	b	.L107
.L128:
	.align	2, 0
.L127:
	.word	gBattleMons
.L122:
	ldr	r0, .L129
	ldrb	r0, [r0]
	ldr	r1, .L129+0x4
	ldr	r1, [r1]
	add	r0, r0, r1
	mov	r1, #0x9a
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	strb	r5, [r0]
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r2, #0x0
	bl	BtlController_EmitTwoReturnValues
	mov	r0, #0x1
	b	.L121
.L130:
	.align	2, 0
.L129:
	.word	gActiveBattler
	.word	gBattleStruct
.L103:
	add	r2, sp, #0x4
	add	r0, r3, #0
	mov	r1, sp
	bl	GetAIPartyIndexes
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r2, .L131
	str	r2, [sp, #0x8]
	cmp	r0, #0
	bne	.L104	@cond_branch
	ldr	r0, .L131+0x4
	str	r0, [sp, #0x8]
.L104:
	ldr	r5, [sp]
	ldr	r0, [sp, #0x4]
	cmp	r5, r0
	bge	.L107	@cond_branch
	ldr	r1, .L131+0x8
	mov	r9, r1
.L109:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r2, [sp, #0x8]
	add	r6, r2, r0
	add	r0, r6, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L108	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L108	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x41
	bl	GetMonData
	ldr	r1, .L131+0xc
	cmp	r0, r1
	beq	.L108	@cond_branch
	ldr	r1, .L131+0x10
	mov	r2, r8
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r5, r0
	beq	.L108	@cond_branch
	lsl	r0, r7, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r5, r0
	beq	.L108	@cond_branch
	ldr	r0, .L131+0x14
	ldr	r1, [r0]
	add	r0, r2, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r5, r0
	beq	.L108	@cond_branch
	add	r0, r7, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r5, r0
	beq	.L108	@cond_branch
	add	r0, r6, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	add	r0, r6, #0
	mov	r1, #0x2e
	bl	GetMonData
	cmp	r0, #0
	beq	.L117	@cond_branch
	lsl	r0, r4, #0x3
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	ldrh	r0, [r0, #0x1a]
	b	.L118
.L132:
	.align	2, 0
.L131:
	.word	gEnemyParty
	.word	gPlayerParty
	.word	gBaseStats
	.word	0x432
	.word	gBattlerPartyIndexes
	.word	gBattleStruct
.L117:
	lsl	r0, r4, #0x3
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	ldrh	r0, [r0, #0x18]
.L118:
	cmp	sl, r0
	bne	.L108	@cond_branch
	bl	Random
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.LCB1108
	b	.L122	@long jump
.LCB1108:
.L108:
	add	r5, r5, #0x1
	ldr	r0, [sp, #0x4]
	cmp	r5, r0
	blt	.L109	@cond_branch
.L107:
	mov	r0, #0x0
.L121:
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe6:
	.size	 FindMonThatAbsorbsOpponentsMove,.Lfe6-FindMonThatAbsorbsOpponentsMove
	.align	2, 0
	.type	 ShouldSwitchIfNaturalCure,function
	.thumb_func
ShouldSwitchIfNaturalCure:
	push	{r4, r5, lr}
	ldr	r3, .L148
	ldr	r5, .L148+0x4
	ldrb	r4, [r5]
	mov	r0, #0x5c
	mov	r2, r4
	mul	r2, r2, r0
	add	r0, r3, #0
	add	r0, r0, #0x50
	add	r0, r2, r0
	ldr	r0, [r0]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L145	@cond_branch
	add	r1, r2, r3
	ldrh	r0, [r1, #0x20]
	cmp	r0, #0x1e
	bne	.L145	@cond_branch
	ldrh	r0, [r1, #0x2e]
	ldrh	r1, [r1, #0x2a]
	lsr	r0, r0, #0x1
	cmp	r1, r0
	bcc	.L145	@cond_branch
	ldr	r1, .L148+0x8
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	cmp	r1, #0
	beq	.L138	@cond_branch
	ldr	r0, .L148+0xc
	cmp	r1, r0
	bne	.L137	@cond_branch
.L138:
	bl	Random
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L137	@cond_branch
	ldrb	r0, [r5]
	b	.L146
.L149:
	.align	2, 0
.L148:
	.word	gBattleMons
	.word	gActiveBattler
	.word	gLastLandedMoves
	.word	0xffff
.L137:
	ldr	r2, .L150
	ldr	r1, .L150+0x4
	ldr	r4, .L150+0x8
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0
	bne	.L139	@cond_branch
	bl	Random
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L139	@cond_branch
	ldrb	r0, [r4]
	b	.L146
.L151:
	.align	2, 0
.L150:
	.word	gBattleMoves
	.word	gLastLandedMoves
	.word	gActiveBattler
.L139:
	mov	r0, #0x8
	mov	r1, #0x1
	bl	FindMonWithFlagsAndSuperEffective
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L147	@cond_branch
	mov	r0, #0x4
	mov	r1, #0x1
	bl	FindMonWithFlagsAndSuperEffective
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L147	@cond_branch
	bl	Random
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L143	@cond_branch
.L145:
	mov	r0, #0x0
	b	.L144
.L143:
	ldr	r0, .L152
	ldrb	r0, [r0]
.L146:
	ldr	r1, .L152+0x4
	ldr	r1, [r1]
	add	r0, r0, r1
	mov	r1, #0x9a
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	mov	r1, #0x6
	strb	r1, [r0]
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r2, #0x0
	bl	BtlController_EmitTwoReturnValues
.L147:
	mov	r0, #0x1
.L144:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L153:
	.align	2, 0
.L152:
	.word	gActiveBattler
	.word	gBattleStruct
.Lfe7:
	.size	 ShouldSwitchIfNaturalCure,.Lfe7-ShouldSwitchIfNaturalCure
	.align	2, 0
	.type	 HasSuperEffectiveMoveAgainstOpponents,function
	.thumb_func
HasSuperEffectiveMoveAgainstOpponents:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L181
	ldrb	r0, [r0]
	bl	GetBattlerPosition
	mov	r1, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	add	r0, r7, #0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L181+0x4
	ldrb	r1, [r0]
	ldr	r2, .L181+0x8
	lsl	r0, r5, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L155	@cond_branch
	mov	r4, #0x0
	ldr	r0, .L181+0xc
	mov	r9, r0
	ldr	r0, .L181+0x10
	mov	r8, r0
.L159:
	lsl	r1, r4, #0x1
	ldr	r0, .L181
	ldrb	r2, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, r0
	add	r1, r1, r9
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L158	@cond_branch
	add	r1, r2, #0
	add	r2, r5, #0
	bl	AI_GetTypeEffectiveness
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r8
	bls	.L158	@cond_branch
	cmp	r6, #0
	bne	.L180	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L180	@cond_branch
.L158:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L159	@cond_branch
.L155:
	ldr	r0, .L181+0x14
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L165	@cond_branch
	b	.L166
.L182:
	.align	2, 0
.L181:
	.word	gActiveBattler
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gBattleMons+0xc
	.word	0x1fff
	.word	gBattleTypeFlags
.L179:
.L180:
	mov	r0, #0x1
	b	.L176
.L165:
	mov	r1, #0x2
	add	r0, r7, #0
	eor	r0, r0, r1
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L183
	ldrb	r1, [r0]
	ldr	r2, .L183+0x4
	lsl	r0, r5, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L166	@cond_branch
	mov	r4, #0x0
	ldr	r0, .L183+0x8
	mov	r8, r0
	ldr	r7, .L183+0xc
.L170:
	lsl	r1, r4, #0x1
	ldr	r0, .L183+0x10
	ldrb	r2, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, r0
	add	r1, r1, r8
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L169	@cond_branch
	add	r1, r2, #0
	add	r2, r5, #0
	bl	AI_GetTypeEffectiveness
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r7
	bls	.L169	@cond_branch
	cmp	r6, #0
	bne	.L179	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L180	@cond_branch
.L169:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L170	@cond_branch
.L166:
	mov	r0, #0x0
.L176:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L184:
	.align	2, 0
.L183:
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gBattleMons+0xc
	.word	0x1fff
	.word	gActiveBattler
.Lfe8:
	.size	 HasSuperEffectiveMoveAgainstOpponents,.Lfe8-HasSuperEffectiveMoveAgainstOpponents
	.align	2, 0
	.type	 AreStatsRaised,function
	.thumb_func
AreStatsRaised:
	push	{r4, lr}
	mov	r4, #0x0
	ldr	r1, .L193
	ldr	r0, .L193+0x4
	ldrb	r2, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0x18
	add	r2, r0, r1
	mov	r3, #0x7
.L189:
	ldrb	r1, [r2]
	mov	r0, #0x0
	ldrsb	r0, [r2, r0]
	cmp	r0, #0x6
	ble	.L188	@cond_branch
	sub	r1, r1, #0x6
	lsl	r0, r4, #0x18
	asr	r0, r0, #0x18
	add	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L188:
	add	r2, r2, #0x1
	sub	r3, r3, #0x1
	cmp	r3, #0
	bge	.L189	@cond_branch
	mov	r0, #0x0
	cmp	r4, #0x3
	bls	.L192	@cond_branch
	mov	r0, #0x1
.L192:
	pop	{r4}
	pop	{r1}
	bx	r1
.L194:
	.align	2, 0
.L193:
	.word	gBattleMons
	.word	gActiveBattler
.Lfe9:
	.size	 AreStatsRaised,.Lfe9-AreStatsRaised
	.align	2, 0
	.type	 FindMonWithFlagsAndSuperEffective,function
	.thumb_func
FindMonWithFlagsAndSuperEffective:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x8]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp, #0xc]
	ldr	r1, .L231
	ldr	r5, .L231+0x4
	ldrb	r3, [r5]
	lsl	r0, r3, #0x1
	add	r4, r0, r1
	ldrh	r1, [r4]
	cmp	r1, #0
	bne	.LCB1581
	b	.L207	@long jump
.LCB1581:
	ldr	r0, .L231+0x8
	cmp	r1, r0
	bne	.LCB1586
	b	.L207	@long jump
.LCB1586:
	ldr	r0, .L231+0xc
	add	r0, r3, r0
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.LCB1593
	b	.L207	@long jump
.LCB1593:
	ldr	r2, .L231+0x10
	ldrh	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0
	bne	.LCB1604
	b	.L207	@long jump
.LCB1604:
	ldr	r0, .L231+0x14
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L200	@cond_branch
	mov	r8, r3
	mov	r0, r8
	bl	GetBattlerPosition
	mov	r4, #0x2
	eor	r0, r0, r4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	ldr	r1, .L231+0x18
	ldrb	r1, [r1]
	ldr	r2, .L231+0x1c
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L201	@cond_branch
	ldrb	r5, [r5]
	mov	sl, r5
	b	.L203
.L232:
	.align	2, 0
.L231:
	.word	gLastLandedMoves
	.word	gActiveBattler
	.word	0xffff
	.word	gLastHitBy
	.word	gBattleMoves
	.word	gBattleTypeFlags
	.word	gAbsentBattlerFlags
	.word	gBitTable
.L201:
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	eor	r0, r0, r4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	b	.L203
.L229:
	ldrb	r0, [r5]
	ldr	r1, .L233
	ldr	r1, [r1]
	add	r0, r0, r1
	mov	r1, #0x9a
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	strb	r6, [r0]
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r2, #0x0
	bl	BtlController_EmitTwoReturnValues
	mov	r0, #0x1
	b	.L228
.L234:
	.align	2, 0
.L233:
	.word	gBattleStruct
.L200:
	mov	r8, r3
	mov	sl, r8
.L203:
	ldr	r4, .L235
	ldrb	r0, [r4]
	add	r2, sp, #0x4
	mov	r1, sp
	bl	GetAIPartyIndexes
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r2, .L235+0x4
	str	r2, [sp, #0x10]
	cmp	r0, #0
	bne	.L204	@cond_branch
	ldr	r0, .L235+0x8
	str	r0, [sp, #0x10]
.L204:
	ldr	r6, [sp]
	b	.L230
.L236:
	.align	2, 0
.L235:
	.word	gActiveBattler
	.word	gEnemyParty
	.word	gPlayerParty
.L209:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, [sp, #0x10]
	add	r5, r1, r0
	add	r0, r5, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	bne	.LCB1741
	b	.L208	@long jump
.LCB1741:
	add	r0, r5, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L208	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x41
	bl	GetMonData
	ldr	r1, .L237
	cmp	r0, r1
	beq	.L208	@cond_branch
	ldr	r1, .L237+0x4
	mov	r2, r8
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r6, r0
	beq	.L208	@cond_branch
	mov	r2, sl
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r6, r0
	beq	.L208	@cond_branch
	ldr	r0, .L237+0x8
	ldr	r1, [r0]
	mov	r2, r8
	add	r0, r2, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r6, r0
	beq	.L208	@cond_branch
	mov	r2, sl
	add	r0, r2, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r6, r0
	beq	.L208	@cond_branch
	add	r0, r5, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	add	r0, r5, #0
	mov	r1, #0x2e
	bl	GetMonData
	cmp	r0, #0
	beq	.L217	@cond_branch
	lsl	r0, r4, #0x3
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	ldr	r1, .L237+0xc
	add	r0, r0, r1
	ldrh	r2, [r0, #0x1a]
	b	.L218
.L238:
	.align	2, 0
.L237:
	.word	0x432
	.word	gBattlerPartyIndexes
	.word	gBattleStruct
	.word	gBaseStats
.L217:
	lsl	r0, r4, #0x3
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	ldr	r2, .L239
	add	r0, r0, r2
	ldrh	r2, [r0, #0x18]
.L218:
	ldr	r1, .L239+0x4
	ldr	r5, .L239+0x8
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	add	r1, r4, #0
	bl	CalcPartyMonTypeEffectivenessMultiplier
	ldr	r0, .L239+0xc
	ldrh	r0, [r0]
	ldr	r1, [sp, #0x8]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L208	@cond_branch
	ldr	r0, .L239+0x10
	ldrb	r1, [r5]
	add	r1, r1, r0
	ldrb	r1, [r1]
	mov	r8, r1
	mov	r4, #0x0
	mov	r0, #0x64
	mov	r7, r6
	mul	r7, r7, r0
	ldr	r2, .L239+0x14
	mov	r9, r2
.L223:
	add	r1, r4, #0
	add	r1, r1, #0xd
	ldr	r2, [sp, #0x10]
	add	r0, r2, r7
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0
	beq	.L222	@cond_branch
	ldr	r5, .L239+0x8
	ldrb	r1, [r5]
	mov	r2, r8
	bl	AI_GetTypeEffectiveness
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r9
	bls	.L222	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, [sp, #0xc]
	bl	__modsi3
	cmp	r0, #0
	bne	.LCB1890
	b	.L229	@long jump
.LCB1890:
.L222:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L223	@cond_branch
.L208:
	add	r6, r6, #0x1
.L230:
	ldr	r0, [sp, #0x4]
	cmp	r6, r0
	bge	.LCB1906
	b	.L209	@long jump
.LCB1906:
.L207:
	mov	r0, #0x0
.L228:
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L240:
	.align	2, 0
.L239:
	.word	gBaseStats
	.word	gLastLandedMoves
	.word	gActiveBattler
	.word	gMoveResultFlags
	.word	gLastHitBy
	.word	0x1fff
.Lfe10:
	.size	 FindMonWithFlagsAndSuperEffective,.Lfe10-FindMonWithFlagsAndSuperEffective
	.align	2, 0
	.type	 ShouldSwitch,function
	.thumb_func
ShouldSwitch:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x8
	ldr	r1, .L277
	ldr	r4, .L277+0x4
	ldrb	r2, [r4]
	mov	r0, #0x5c
	mul	r0, r0, r2
	add	r1, r1, #0x54
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L277+0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB1948
	b	.L273	@long jump
.LCB1948:
	ldr	r1, .L277+0xc
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB1957
	b	.L273	@long jump
.LCB1957:
	add	r0, r2, #0
	bl	IsAbilityPreventingEscape
	cmp	r0, #0
	beq	.LCB1962
	b	.L273	@long jump
.LCB1962:
	ldr	r0, .L277+0x10
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0xb
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB1969
	b	.L273	@long jump
.LCB1969:
	mov	r0, #0x0
	mov	r9, r0
	mov	r0, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L246	@cond_branch
	ldrb	r7, [r4]
	add	r0, r7, #0
	bl	GetBattlerPosition
	mov	r5, #0x2
	eor	r0, r0, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	ldr	r1, .L277+0x14
	ldrb	r1, [r1]
	ldr	r2, .L277+0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L247	@cond_branch
	ldrb	r6, [r4]
	b	.L249
.L278:
	.align	2, 0
.L277:
	.word	gBattleMons
	.word	gActiveBattler
	.word	0x4002000
	.word	gStatuses3
	.word	gBattleTypeFlags
	.word	gAbsentBattlerFlags
	.word	gBitTable
.L247:
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	eor	r0, r0, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	b	.L249
.L246:
	ldrb	r6, [r4]
	add	r7, r6, #0
.L249:
	ldr	r4, .L279
	ldrb	r0, [r4]
	add	r2, sp, #0x4
	mov	r1, sp
	bl	GetAIPartyIndexes
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r1, .L279+0x4
	mov	r8, r1
	cmp	r0, #0
	bne	.L250	@cond_branch
	ldr	r0, .L279+0x8
	mov	r8, r0
.L250:
	ldr	r5, [sp]
	b	.L276
.L280:
	.align	2, 0
.L279:
	.word	gActiveBattler
	.word	gEnemyParty
	.word	gPlayerParty
.L255:
	mov	r0, #0x64
	mul	r0, r0, r5
	mov	r1, r8
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L254	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L254	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	ldr	r1, .L281
	cmp	r0, r1
	beq	.L254	@cond_branch
	ldr	r1, .L281+0x4
	lsl	r0, r7, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r5, r0
	beq	.L254	@cond_branch
	lsl	r0, r6, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r5, r0
	beq	.L254	@cond_branch
	ldr	r0, .L281+0x8
	ldr	r1, [r0]
	add	r0, r7, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r5, r0
	beq	.L254	@cond_branch
	add	r0, r6, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r5, r0
	beq	.L254	@cond_branch
	mov	r0, #0x1
	add	r9, r9, r0
.L254:
	add	r5, r5, #0x1
.L276:
	ldr	r0, [sp, #0x4]
	cmp	r5, r0
	blt	.L255	@cond_branch
	mov	r1, r9
	cmp	r1, #0
	beq	.L273	@cond_branch
	bl	ShouldSwitchIfAllBadMoves
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L274	@cond_branch
	bl	ShouldSwitchIfPerishSong
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L274	@cond_branch
	bl	ShouldSwitchIfWonderGuard
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L274	@cond_branch
	bl	FindMonThatAbsorbsOpponentsMove
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L274	@cond_branch
	bl	ShouldSwitchIfNaturalCure
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L274	@cond_branch
	bl	HasBadOdds
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L274	@cond_branch
	mov	r0, #0x0
	bl	HasSuperEffectiveMoveAgainstOpponents
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L273	@cond_branch
	bl	AreStatsRaised
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L273	@cond_branch
	mov	r0, #0x8
	mov	r1, #0x2
	bl	FindMonWithFlagsAndSuperEffective
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L274	@cond_branch
	mov	r0, #0x4
	mov	r1, #0x3
	bl	FindMonWithFlagsAndSuperEffective
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L273	@cond_branch
.L274:
	mov	r0, #0x1
	b	.L275
.L282:
	.align	2, 0
.L281:
	.word	0x432
	.word	gBattlerPartyIndexes
	.word	gBattleStruct
.L273:
	mov	r0, #0x0
.L275:
	add	sp, sp, #0x8
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe11:
	.size	 ShouldSwitch,.Lfe11-ShouldSwitch
	.align	2, 0
	.globl	AI_TrySwitchOrUseItem
	.type	 AI_TrySwitchOrUseItem,function
	.thumb_func
AI_TrySwitchOrUseItem:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x8
	ldr	r4, .L305
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r5, r6, #0
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r1, .L305+0x4
	mov	r8, r1
	cmp	r0, #0
	bne	.L284	@cond_branch
	ldr	r2, .L305+0x8
	mov	r8, r2
.L284:
	ldr	r7, .L305+0xc
	ldr	r0, [r7]
	mov	r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB2254
	b	.L286	@long jump
.LCB2254:
	bl	ShouldSwitch
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB2261
	b	.L287	@long jump
.LCB2261:
	ldrb	r0, [r4]
	ldr	r2, .L305+0x10
	ldr	r1, [r2]
	add	r0, r0, r1
	mov	r1, #0x9a
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x6
	bne	.L288	@cond_branch
	bl	GetMostSuitableMonToSwitchInto
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x6
	bne	.L289	@cond_branch
	ldr	r0, [r7]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L290	@cond_branch
	add	r0, r6, #0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r6, r5, #0
	b	.L291
.L306:
	.align	2, 0
.L305:
	.word	gActiveBattler
	.word	gEnemyParty
	.word	gPlayerParty
	.word	gBattleTypeFlags
	.word	gBattleStruct
.L290:
	add	r0, r5, #0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r0, #0x2
	eor	r5, r5, r0
	add	r0, r5, #0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
.L291:
	ldr	r0, .L307
	ldrb	r0, [r0]
	add	r2, sp, #0x4
	mov	r1, sp
	bl	GetAIPartyIndexes
	ldr	r4, [sp]
	b	.L304
.L308:
	.align	2, 0
.L307:
	.word	gActiveBattler
.L295:
	mov	r0, #0x64
	mul	r0, r0, r4
	add	r0, r0, r8
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L294	@cond_branch
	ldr	r1, .L309
	lsl	r0, r6, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r4, r0
	beq	.L294	@cond_branch
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r4, r0
	beq	.L294	@cond_branch
	ldr	r0, .L309+0x4
	ldr	r1, [r0]
	add	r0, r6, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r4, r0
	beq	.L294	@cond_branch
	add	r0, r5, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r4, r0
	bne	.L289	@cond_branch
.L294:
	add	r4, r4, #0x1
.L304:
	ldr	r0, [sp, #0x4]
	cmp	r4, r0
	blt	.L295	@cond_branch
.L289:
	ldr	r0, .L309+0x8
	ldrb	r0, [r0]
	ldr	r2, .L309+0x4
	ldr	r1, [r2]
	add	r0, r0, r1
	mov	r1, #0x9a
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	strb	r4, [r0]
.L288:
	ldr	r0, .L309+0x8
	ldrb	r1, [r0]
	ldr	r0, [r2]
	add	r0, r1, r0
	add	r1, r0, #0
	add	r1, r1, #0x5c
	mov	r2, #0x9a
	lsl	r2, r2, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	b	.L283
.L310:
	.align	2, 0
.L309:
	.word	gBattlerPartyIndexes
	.word	gBattleStruct
	.word	gActiveBattler
.L287:
	bl	ShouldUseItem
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L283	@cond_branch
.L286:
	ldr	r0, .L311
	ldrb	r0, [r0]
	mov	r2, #0x1
	eor	r2, r2, r0
	lsl	r2, r2, #0x8
	mov	r0, #0x1
	mov	r1, #0x0
	bl	BtlController_EmitTwoReturnValues
.L283:
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L312:
	.align	2, 0
.L311:
	.word	gActiveBattler
.Lfe12:
	.size	 AI_TrySwitchOrUseItem,.Lfe12-AI_TrySwitchOrUseItem
	.align	2, 0
	.type	 GetBestMonBatonPass,function
	.thumb_func
GetBestMonBatonPass:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	mov	r9, r0
	str	r1, [sp]
	mov	sl, r2
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp, #0x4]
	mov	r0, #0x0
	mov	r8, r0
	add	r4, r1, #0
	cmp	r4, sl
	bge	.L315	@cond_branch
	ldr	r3, .L334
.L317:
	lsl	r0, r4, #0x2
	add	r1, r0, r3
	ldr	r1, [r1]
	ldr	r2, [sp, #0x4]
	and	r1, r1, r2
	add	r6, r0, #0
	add	r7, r4, #0x1
	cmp	r1, #0
	bne	.L316	@cond_branch
	mov	r5, #0x0
	b	.L319
.L335:
	.align	2, 0
.L334:
	.word	gBitTable
.L321:
	add	r5, r5, #0x1
.L319:
	cmp	r5, #0x3
	bgt	.L316	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r4
	add	r0, r0, r9
	add	r1, r5, #0
	add	r1, r1, #0xd
	mov	r2, #0x0
	str	r3, [sp, #0x8]
	bl	GetMonData
	ldr	r3, [sp, #0x8]
	cmp	r0, #0xe2
	bne	.L321	@cond_branch
	add	r0, r6, r3
	ldr	r0, [r0]
	mov	r1, r8
	orr	r1, r1, r0
	mov	r8, r1
.L316:
	add	r4, r7, #0
	cmp	r4, sl
	blt	.L317	@cond_branch
.L315:
	ldr	r2, [sp, #0x2c]
	cmp	r2, #0x2
	beq	.L327	@cond_branch
	cmp	r2, #0x2
	ble	.L326	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L326	@cond_branch
.L327:
	mov	r0, r8
	cmp	r0, #0
	beq	.L326	@cond_branch
	mov	r1, sl
	ldr	r2, [sp]
	sub	r5, r1, r2
	ldr	r6, .L336
.L328:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r5, #0
	bl	__modsi3
	ldr	r1, [sp]
	add	r4, r0, r1
	lsl	r0, r4, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	mov	r2, r8
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L328	@cond_branch
	add	r0, r4, #0
	b	.L333
.L337:
	.align	2, 0
.L336:
	.word	gBitTable
.L326:
	mov	r0, #0x6
.L333:
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe13:
	.size	 GetBestMonBatonPass,.Lfe13-GetBestMonBatonPass
	.align	2, 0
	.type	 GestBestMonOffensive,function
	.thumb_func
GestBestMonOffensive:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x20
	str	r0, [sp]
	str	r1, [sp, #0x4]
	str	r2, [sp, #0x8]
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp, #0xc]
	mov	r0, #0x0
	str	r0, [sp, #0x10]
.L341:
	mov	r1, #0x0
	str	r1, [sp, #0x14]
	mov	r2, #0x6
	str	r2, [sp, #0x18]
	ldr	r7, [sp, #0x4]
	b	.L363
.L345:
	ldr	r0, .L364
	lsl	r1, r7, #0x2
	add	r1, r1, r0
	ldr	r1, [r1]
	add	r0, r1, #0
	ldr	r2, [sp, #0xc]
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L344	@cond_branch
	ldr	r0, [sp, #0x10]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L344	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r7
	ldr	r1, [sp]
	add	r0, r1, r0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r2, .L364+0x4
	lsl	r1, r0, #0x3
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r0, [r1, #0x6]
	add	r2, r0, #0
	ldrb	r6, [r1, #0x7]
	mov	r9, r6
	mov	r0, #0x5c
	ldr	r1, [sp, #0x40]
	mul	r0, r0, r1
	ldr	r1, .L364+0x8
	add	r0, r0, r1
	add	r1, r0, #0
	add	r1, r1, #0x22
	ldrb	r5, [r1]
	mov	sl, r5
	add	r0, r0, #0x23
	ldrb	r0, [r0]
	mov	r8, r0
	add	r0, r2, #0
	add	r1, r5, #0
	str	r2, [sp, #0x1c]
	bl	GetTypeModifier
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x4
	ldr	r2, [sp, #0x1c]
	cmp	r6, r2
	beq	.L347	@cond_branch
	add	r0, r6, #0
	add	r1, r5, #0
	bl	GetTypeModifier
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mul	r4, r4, r0
	ldr	r2, [sp, #0x1c]
.L347:
	cmp	r8, sl
	beq	.L348	@cond_branch
	add	r0, r2, #0
	mov	r1, r8
	str	r2, [sp, #0x1c]
	bl	GetTypeModifier
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mul	r4, r4, r0
	ldr	r2, [sp, #0x1c]
	cmp	r9, r2
	beq	.L348	@cond_branch
	mov	r0, r9
	mov	r1, r8
	bl	GetTypeModifier
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mul	r4, r4, r0
.L348:
	ldr	r2, [sp, #0x14]
	cmp	r2, r4
	bcs	.L344	@cond_branch
	str	r4, [sp, #0x14]
	str	r7, [sp, #0x18]
.L344:
	add	r7, r7, #0x1
.L363:
	ldr	r0, [sp, #0x8]
	cmp	r7, r0
	blt	.L345	@cond_branch
	ldr	r1, [sp, #0x18]
	cmp	r1, #0x6
	beq	.L352	@cond_branch
	mov	r7, #0x0
	mov	r0, #0x64
	mov	r5, r1
	mul	r5, r5, r0
	ldr	r6, .L364+0xc
	ldr	r2, [sp, #0x40]
	lsl	r4, r2, #0x18
.L356:
	add	r1, r7, #0
	add	r1, r1, #0xd
	ldr	r2, [sp]
	add	r0, r2, r5
	bl	GetMonData
	cmp	r0, #0
	beq	.L355	@cond_branch
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, .L364+0x10
	ldrb	r1, [r1]
	lsr	r2, r4, #0x18
	bl	AI_GetTypeEffectiveness
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r6
	bhi	.L354	@cond_branch
.L355:
	add	r7, r7, #0x1
	cmp	r7, #0x3
	ble	.L356	@cond_branch
.L354:
	cmp	r7, #0x4
	beq	.L359	@cond_branch
	ldr	r0, [sp, #0x18]
	b	.L362
.L365:
	.align	2, 0
.L364:
	.word	gBitTable
	.word	gBaseStats
	.word	gBattleMons
	.word	0x1fff
	.word	gActiveBattler
.L359:
	ldr	r0, .L366
	ldr	r2, [sp, #0x18]
	lsl	r1, r2, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	ldr	r1, [sp, #0x10]
	orr	r1, r1, r0
	str	r1, [sp, #0x10]
	b	.L339
.L367:
	.align	2, 0
.L366:
	.word	gBitTable
.L352:
	mov	r2, #0x3f
	str	r2, [sp, #0x10]
.L339:
	ldr	r0, [sp, #0x10]
	cmp	r0, #0x3f
	beq	.LCB2842
	b	.L341	@long jump
.LCB2842:
	mov	r0, #0x6
.L362:
	add	sp, sp, #0x20
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe14:
	.size	 GestBestMonOffensive,.Lfe14-GestBestMonOffensive
	.align	2, 0
	.type	 GetBestMonDmg,function
	.thumb_func
GetBestMonDmg:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	str	r0, [sp]
	mov	sl, r2
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp, #0x4]
	mov	r0, #0x0
	mov	r8, r0
	mov	r2, #0x6
	str	r2, [sp, #0x8]
	ldr	r0, .L382
	mov	r2, r8
	strh	r2, [r0]
	add	r4, r1, #0
	cmp	r4, sl
	bge	.L370	@cond_branch
.L372:
	ldr	r0, .L382+0x4
	lsl	r1, r4, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	ldr	r1, [sp, #0x4]
	and	r0, r0, r1
	add	r2, r4, #0x1
	mov	r9, r2
	cmp	r0, #0
	bne	.L371	@cond_branch
	mov	r6, #0x0
	mov	r0, #0x64
	mul	r0, r0, r4
	ldr	r1, [sp]
	add	r5, r1, r0
	ldr	r2, [sp, #0x2c]
	lsl	r7, r2, #0x18
.L377:
	add	r1, r6, #0
	add	r1, r1, #0xd
	add	r0, r5, #0
	bl	GetMonData
	add	r1, r0, #0
	cmp	r1, #0
	beq	.L376	@cond_branch
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r2, .L382+0x8
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0
	beq	.L376	@cond_branch
	lsl	r0, r1, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, .L382+0xc
	ldrb	r1, [r1]
	lsr	r2, r7, #0x18
	add	r3, r5, #0
	bl	AI_CalcPartyMonDamage
	cmp	r8, r0
	bge	.L376	@cond_branch
	mov	r8, r0
	str	r4, [sp, #0x8]
.L376:
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L377	@cond_branch
.L371:
	mov	r4, r9
	cmp	r4, sl
	blt	.L372	@cond_branch
.L370:
	ldr	r0, [sp, #0x8]
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L383:
	.align	2, 0
.L382:
	.word	gMoveResultFlags
	.word	gBitTable
	.word	gBattleMoves
	.word	gActiveBattler
.Lfe15:
	.size	 GetBestMonDmg,.Lfe15-GetBestMonDmg
	.align	2, 0
	.globl	GetMostSuitableMonToSwitchInto
	.type	 GetMostSuitableMonToSwitchInto,function
	.thumb_func
GetMostSuitableMonToSwitchInto:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	mov	r9, r0
	ldr	r4, .L408
	ldrb	r2, [r4]
	ldr	r0, .L408+0x4
	ldr	r0, [r0]
	add	r0, r2, r0
	add	r1, r0, #0
	add	r1, r1, #0x5c
	ldrb	r0, [r1]
	cmp	r0, #0x6
	beq	.LCB3003
	b	.L404	@long jump
.LCB3003:
	ldr	r0, .L408+0x8
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0xb
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L386	@cond_branch
	ldr	r1, .L408+0xc
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r0, r0, #0x1
	b	.L403
.L409:
	.align	2, 0
.L408:
	.word	gActiveBattler
	.word	gBattleStruct
	.word	gBattleTypeFlags
	.word	gBattlerPartyIndexes
.L386:
	mov	r0, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L387	@cond_branch
	mov	r8, r2
	mov	r0, r8
	bl	GetBattlerPosition
	mov	r5, #0x2
	eor	r0, r0, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	ldr	r1, .L410
	ldrb	r1, [r1]
	ldr	r2, .L410+0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L388	@cond_branch
	ldrb	r7, [r4]
	b	.L389
.L411:
	.align	2, 0
.L410:
	.word	gAbsentBattlerFlags
	.word	gBitTable
.L388:
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	eor	r0, r0, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
.L389:
	mov	r0, #0x1
	mov	r6, r8
	eor	r6, r6, r0
	ldr	r0, .L412
	ldrb	r1, [r0]
	ldr	r2, .L412+0x4
	lsl	r0, r6, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L391	@cond_branch
	mov	r0, #0x2
	eor	r6, r6, r0
	b	.L391
.L413:
	.align	2, 0
.L412:
	.word	gAbsentBattlerFlags
	.word	gBitTable
.L387:
	add	r0, r2, #0
	bl	GetBattlerPosition
	mov	r1, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldrb	r7, [r4]
	mov	r8, r7
.L391:
	ldr	r4, .L414
	ldrb	r0, [r4]
	add	r2, sp, #0x8
	add	r1, sp, #0x4
	bl	GetAIPartyIndexes
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r1, .L414+0x4
	mov	sl, r1
	cmp	r0, #0
	bne	.L392	@cond_branch
	ldr	r2, .L414+0x8
	mov	sl, r2
.L392:
	ldr	r4, [sp, #0x4]
	b	.L406
.L415:
	.align	2, 0
.L414:
	.word	gActiveBattler
	.word	gEnemyParty
	.word	gPlayerParty
.L397:
	mov	r0, #0x64
	mul	r0, r0, r4
	mov	r1, sl
	add	r5, r1, r0
	add	r0, r5, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L399	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L399	@cond_branch
	ldr	r1, .L416
	mov	r2, r8
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r0, r4
	beq	.L399	@cond_branch
	lsl	r0, r7, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r0, r4
	beq	.L399	@cond_branch
	ldr	r0, .L416+0x4
	ldr	r1, [r0]
	add	r0, r2, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r4, r0
	beq	.L399	@cond_branch
	add	r0, r7, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r4, r0
	beq	.L399	@cond_branch
	add	r0, r5, #0
	bl	GetMonAbility
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x36
	bne	.L398	@cond_branch
	ldr	r0, .L416+0x8
	ldrb	r0, [r0]
	add	r1, r6, #0
	bl	IsTruantMonVulnerable
	cmp	r0, #0
	beq	.L398	@cond_branch
.L399:
	ldr	r1, .L416+0xc
	lsl	r0, r4, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, r9
	orr	r1, r1, r0
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	b	.L396
.L417:
	.align	2, 0
.L416:
	.word	gBattlerPartyIndexes
	.word	gBattleStruct
	.word	gActiveBattler
	.word	gBitTable
.L398:
	ldr	r2, [sp, #0xc]
	add	r2, r2, #0x1
	str	r2, [sp, #0xc]
.L396:
	add	r4, r4, #0x1
.L406:
	ldr	r2, [sp, #0x8]
	cmp	r4, r2
	blt	.L397	@cond_branch
	ldr	r1, [sp, #0x4]
	ldr	r0, [sp, #0xc]
	str	r0, [sp]
	mov	r0, sl
	mov	r3, r9
	bl	GetBestMonBatonPass
	cmp	r0, #0x6
	bne	.L403	@cond_branch
	ldr	r1, [sp, #0x4]
	ldr	r2, [sp, #0x8]
	str	r6, [sp]
	mov	r0, sl
	mov	r3, r9
	bl	GestBestMonOffensive
	cmp	r0, #0x6
	bne	.L403	@cond_branch
	mov	r0, #0x6
	b	.L404
.L403:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L404:
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe16:
	.size	 GetMostSuitableMonToSwitchInto,.Lfe16-GetMostSuitableMonToSwitchInto
	.align	2, 0
	.type	 GetAI_ItemType,function
	.thumb_func
GetAI_ItemType:
	push	{r4, lr}
	add	r2, r1, #0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x22
	bne	.L419	@cond_branch
	mov	r0, #0x1
	b	.L430
.L419:
	ldrb	r1, [r2, #0x4]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L421	@cond_branch
	mov	r0, #0x2
	b	.L430
.L421:
	ldrb	r4, [r2, #0x3]
	mov	r3, #0x3f
	add	r0, r3, #0
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L423	@cond_branch
	mov	r0, #0x3
	b	.L430
.L423:
	ldrb	r1, [r2]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L426	@cond_branch
	ldrb	r0, [r2, #0x1]
	cmp	r0, #0
	bne	.L426	@cond_branch
	ldrb	r0, [r2, #0x2]
	cmp	r0, #0
	beq	.L425	@cond_branch
.L426:
	mov	r0, #0x4
	b	.L430
.L425:
	mov	r0, #0x80
	and	r0, r0, r4
	cmp	r0, #0
	bne	.L428	@cond_branch
	mov	r0, #0x6
	b	.L430
.L428:
	mov	r0, #0x5
.L430:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe17:
	.size	 GetAI_ItemType,.Lfe17-GetAI_ItemType
	.align	2, 0
	.type	 ShouldUseItem,function
	.thumb_func
ShouldUseItem:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	mov	r0, #0x0
	mov	sl, r0
	mov	r7, #0x0
	ldr	r0, .L488
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xf
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L432	@cond_branch
	ldr	r0, .L488+0x4
	ldrb	r0, [r0]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bne	.LCB3394
	b	.L484	@long jump
.LCB3394:
.L432:
	ldr	r0, .L488+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r5, .L488+0x8
	cmp	r0, #0
	bne	.L433	@cond_branch
	ldr	r5, .L488+0xc
.L433:
	mov	r1, #0x0
	mov	r8, r1
.L438:
	mov	r0, #0x64
	mov	r2, r8
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r4, r5, r0
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L437	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L437	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	ldr	r1, .L488+0x10
	cmp	r0, r1
	beq	.L437	@cond_branch
	mov	r0, sl
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
.L437:
	mov	r0, #0x1
	add	r8, r8, r0
	mov	r1, r8
	cmp	r1, #0x5
	ble	.L438	@cond_branch
	mov	r2, #0x0
	mov	r8, r2
.L444:
	ldr	r1, .L488+0x14
	mov	r0, r8
	cmp	r0, #0
	beq	.L445	@cond_branch
	ldr	r0, [r1]
	ldr	r0, [r0, #0x18]
	add	r0, r0, #0x50
	ldrb	r0, [r0]
	mov	r2, r8
	sub	r0, r0, r2
	add	r0, r0, #0x1
	cmp	sl, r0
	ble	.LCB3474
	b	.L443	@long jump
.LCB3474:
.L445:
	ldr	r0, [r1]
	ldr	r0, [r0, #0x18]
	mov	r2, r8
	lsl	r1, r2, #0x1
	add	r0, r0, #0x48
	add	r0, r0, r1
	ldrh	r0, [r0]
	mov	r9, r0
	str	r1, [sp]
	cmp	r0, #0
	bne	.LCB3487
	b	.L443	@long jump
.LCB3487:
	ldr	r1, .L488+0x18
	sub	r0, r0, #0x1c
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	cmp	r1, #0
	bne	.LCB3494
	b	.L443	@long jump
.LCB3494:
	mov	r0, r9
	cmp	r0, #0xcd
	bne	.L448	@cond_branch
	ldr	r0, .L488+0x1c
	ldr	r0, [r0]
	ldr	r1, .L488+0x20
	add	r5, r0, r1
	b	.L449
.L489:
	.align	2, 0
.L488:
	.word	gBattleTypeFlags
	.word	gActiveBattler
	.word	gEnemyParty
	.word	gPlayerParty
	.word	0x432
	.word	gBattleResources
	.word	gItemEffectTable
	.word	gSaveBlock1Ptr
	.word	0x3214
.L448:
	add	r5, r1, #0
.L449:
	mov	r0, r9
	add	r1, r5, #0
	bl	GetAI_ItemType
	ldr	r4, .L490
	ldrb	r1, [r4]
	lsr	r1, r1, #0x1
	ldr	r3, .L490+0x4
	ldr	r2, [r3]
	add	r1, r1, r2
	add	r1, r1, #0xc0
	strb	r0, [r1]
	ldrb	r0, [r4]
	lsr	r0, r0, #0x1
	ldr	r1, [r3]
	add	r0, r0, r1
	add	r0, r0, #0xc0
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r0, #0x5
	bls	.LCB3547
	b	.L450	@long jump
.LCB3547:
	lsl	r0, r0, #0x2
	ldr	r1, .L490+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L491:
	.align	2, 0
.L490:
	.word	gActiveBattler
	.word	gBattleStruct
	.word	.L478
	.align	2, 0
	.align	2, 0
.L478:
	.word	.L451
	.word	.L454
	.word	.L459
	.word	.L467
	.word	.L475
	.word	.L484
.L451:
	ldr	r2, .L492
	ldr	r0, .L492+0x4
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r1, [r0, #0x2e]
	ldrh	r0, [r0, #0x2a]
	lsr	r1, r1, #0x2
	cmp	r0, r1
	bcc	.LCB3582
	b	.L450	@long jump
.LCB3582:
	cmp	r0, #0
	bne	.LCB3584
	b	.L450	@long jump
.LCB3584:
.L487:
	mov	r7, #0x1
	b	.L483
.L493:
	.align	2, 0
.L492:
	.word	gBattleMons
	.word	gActiveBattler
.L454:
	mov	r0, r9
	mov	r1, #0x4
	mov	r2, #0x4
	bl	GetItemEffectParamOffset
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.LCB3605
	b	.L450	@long jump
.LCB3605:
	ldr	r2, .L494
	ldr	r0, .L494+0x4
	ldrb	r1, [r0]
	mov	r0, #0x5c
	mul	r0, r0, r1
	add	r1, r0, r2
	ldrh	r2, [r1, #0x2a]
	cmp	r2, #0
	bne	.LCB3616
	b	.L450	@long jump
.LCB3616:
	ldrh	r3, [r1, #0x2e]
	lsr	r0, r3, #0x2
	cmp	r2, r0
	bcc	.L487	@cond_branch
	add	r0, r2, #0
	sub	r0, r3, r0
	add	r1, r5, r4
	ldrb	r1, [r1]
	cmp	r0, r1
	bgt	.LCB3629
	b	.L450	@long jump
.LCB3629:
	b	.L487
.L495:
	.align	2, 0
.L494:
	.word	gBattleMons
	.word	gActiveBattler
.L459:
	ldr	r3, .L496
	ldrb	r0, [r3]
	lsr	r0, r0, #0x1
	ldr	r2, .L496+0x4
	ldr	r1, [r2]
	add	r0, r0, r1
	add	r0, r0, #0xc2
	mov	r1, #0x0
	strb	r1, [r0]
	ldrb	r1, [r5, #0x3]
	mov	r6, #0x20
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L460	@cond_branch
	ldr	r1, .L496+0x8
	ldrb	r4, [r3]
	mov	r0, #0x5c
	mul	r0, r0, r4
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L460	@cond_branch
	lsr	r1, r4, #0x1
	ldr	r0, [r2]
	add	r1, r1, r0
	add	r1, r1, #0xc2
	ldrb	r0, [r1]
	orr	r0, r0, r6
	strb	r0, [r1]
	mov	r7, #0x1
.L460:
	ldrb	r1, [r5, #0x3]
	mov	r6, #0x10
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L461	@cond_branch
	ldr	r1, .L496+0x8
	ldrb	r4, [r3]
	mov	r0, #0x5c
	mul	r0, r0, r4
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L462	@cond_branch
	mov	r0, #0x80
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L461	@cond_branch
.L462:
	lsr	r1, r4, #0x1
	ldr	r0, [r2]
	add	r1, r1, r0
	add	r1, r1, #0xc2
	ldrb	r0, [r1]
	orr	r0, r0, r6
	strb	r0, [r1]
	mov	r7, #0x1
.L461:
	ldrb	r1, [r5, #0x3]
	mov	r6, #0x8
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L463	@cond_branch
	ldr	r1, .L496+0x8
	ldrb	r4, [r3]
	mov	r0, #0x5c
	mul	r0, r0, r4
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L463	@cond_branch
	lsr	r1, r4, #0x1
	ldr	r0, [r2]
	add	r1, r1, r0
	add	r1, r1, #0xc2
	ldrb	r0, [r1]
	orr	r0, r0, r6
	strb	r0, [r1]
	mov	r7, #0x1
.L463:
	ldrb	r1, [r5, #0x3]
	mov	r6, #0x4
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L464	@cond_branch
	ldr	r1, .L496+0x8
	ldrb	r4, [r3]
	mov	r0, #0x5c
	mul	r0, r0, r4
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L464	@cond_branch
	lsr	r1, r4, #0x1
	ldr	r0, [r2]
	add	r1, r1, r0
	add	r1, r1, #0xc2
	ldrb	r0, [r1]
	orr	r0, r0, r6
	strb	r0, [r1]
	mov	r7, #0x1
.L464:
	ldrb	r1, [r5, #0x3]
	mov	r6, #0x2
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L465	@cond_branch
	ldr	r1, .L496+0x8
	ldrb	r4, [r3]
	mov	r0, #0x5c
	mul	r0, r0, r4
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L465	@cond_branch
	lsr	r1, r4, #0x1
	ldr	r0, [r2]
	add	r1, r1, r0
	add	r1, r1, #0xc2
	ldrb	r0, [r1]
	orr	r0, r0, r6
	strb	r0, [r1]
	mov	r7, #0x1
.L465:
	ldrb	r1, [r5, #0x3]
	mov	r4, #0x1
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB3828
	b	.L450	@long jump
.LCB3828:
	ldr	r1, .L496+0x8
	ldrb	r3, [r3]
	mov	r0, #0x5c
	mul	r0, r0, r3
	add	r1, r1, #0x54
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB3840
	b	.L450	@long jump
.LCB3840:
	lsr	r1, r3, #0x1
	ldr	r0, [r2]
	add	r1, r1, r0
	add	r1, r1, #0xc2
	ldrb	r0, [r1]
	orr	r0, r0, r4
	strb	r0, [r1]
	b	.L487
.L497:
	.align	2, 0
.L496:
	.word	gActiveBattler
	.word	gBattleStruct
	.word	gBattleMons
.L467:
	ldr	r4, .L498
	ldrb	r0, [r4]
	lsr	r0, r0, #0x1
	ldr	r3, .L498+0x4
	ldr	r1, [r3]
	add	r0, r0, r1
	add	r0, r0, #0xc2
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r1, .L498+0x8
	ldrb	r2, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0, #0x19]
	cmp	r0, #0
	beq	.L450	@cond_branch
	ldrb	r1, [r5]
	mov	r6, #0xf
	add	r0, r6, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L469	@cond_branch
	lsr	r2, r2, #0x1
	ldr	r0, [r3]
	add	r2, r2, r0
	add	r2, r2, #0xc2
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
.L469:
	ldrb	r1, [r5, #0x1]
	mov	r7, #0xf0
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L470	@cond_branch
	ldrb	r0, [r4]
	lsr	r0, r0, #0x1
	ldr	r1, [r3]
	add	r0, r0, r1
	add	r0, r0, #0xc2
	ldrb	r1, [r0]
	mov	r2, #0x2
	orr	r1, r1, r2
	strb	r1, [r0]
.L470:
	ldrb	r1, [r5, #0x1]
	add	r0, r6, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L471	@cond_branch
	ldrb	r0, [r4]
	lsr	r0, r0, #0x1
	ldr	r1, [r3]
	add	r0, r0, r1
	add	r0, r0, #0xc2
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
.L471:
	ldrb	r1, [r5, #0x2]
	add	r0, r6, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L472	@cond_branch
	ldrb	r0, [r4]
	lsr	r0, r0, #0x1
	ldr	r1, [r3]
	add	r0, r0, r1
	add	r0, r0, #0xc2
	ldrb	r1, [r0]
	mov	r2, #0x8
	orr	r1, r1, r2
	strb	r1, [r0]
.L472:
	ldrb	r1, [r5, #0x2]
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L473	@cond_branch
	ldrb	r0, [r4]
	lsr	r0, r0, #0x1
	ldr	r1, [r3]
	add	r0, r0, r1
	add	r0, r0, #0xc2
	ldrb	r1, [r0]
	mov	r2, #0x20
	orr	r1, r1, r2
	strb	r1, [r0]
.L473:
	ldrb	r1, [r5]
	mov	r0, #0x30
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB3987
	b	.L487	@long jump
.LCB3987:
	ldrb	r0, [r4]
	lsr	r0, r0, #0x1
	ldr	r1, [r3]
	add	r0, r0, r1
	add	r0, r0, #0xc2
	ldrb	r1, [r0]
	mov	r2, #0x80
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L487
.L499:
	.align	2, 0
.L498:
	.word	gActiveBattler
	.word	gBattleStruct
	.word	gDisableStructs
.L475:
	ldr	r4, .L500
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r2, .L500+0x4
	ldrb	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r0, [r0, #0x19]
	cmp	r0, #0
	beq	.L450	@cond_branch
	ldr	r0, .L500+0x8
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x4]
	cmp	r0, #0
	bne	.LCB4037
	b	.L487	@long jump
.LCB4037:
.L450:
	cmp	r7, #0
	beq	.L443	@cond_branch
.L483:
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x0
	bl	BtlController_EmitTwoReturnValues
	ldr	r0, .L500
	ldrb	r0, [r0]
	lsr	r0, r0, #0x1
	ldr	r1, .L500+0xc
	ldr	r1, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	add	r0, r0, #0xb8
	mov	r2, r9
	strh	r2, [r0]
	ldr	r0, .L500+0x10
	ldr	r0, [r0]
	ldr	r0, [r0, #0x18]
	add	r0, r0, #0x48
	ldr	r1, [sp]
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0]
	add	r0, r7, #0
	b	.L482
.L501:
	.align	2, 0
.L500:
	.word	gActiveBattler
	.word	gDisableStructs
	.word	gSideTimers
	.word	gBattleStruct
	.word	gBattleResources
.L443:
	mov	r2, #0x1
	add	r8, r8, r2
	mov	r0, r8
	cmp	r0, #0x3
	bgt	.LCB4089
	b	.L444	@long jump
.LCB4089:
.L484:
	mov	r0, #0x0
.L482:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe18:
	.size	 ShouldUseItem,.Lfe18-ShouldUseItem
.text
	.align	2, 0

